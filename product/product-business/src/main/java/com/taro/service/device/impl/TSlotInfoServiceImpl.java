package com.taro.service.device.impl;import java.util.List;import java.util.Map;import org.apache.commons.collections4.CollectionUtils;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.google.common.collect.Maps;import com.taro.dao.device.TSlotInfoDao;import com.taro.entity.device.TSlotInfoEntity;import com.taro.exception.BusinessException;import com.taro.service.AbstractService;import com.taro.service.device.TSlotInfoService;import com.taro.utils.MyStringUtil;/** *<p>Title:TSlotInfoServiceImpl.java</p> *<p>Description: ServiceImpl</p> *@author 张宇唯 *@version 1.0 *@Automatically generate by Coder in 2020-10-22 21:18:59 */@Servicepublic class TSlotInfoServiceImpl extends AbstractService<TSlotInfoEntity> implements TSlotInfoService {		@Autowired	private TSlotInfoDao tSlotInfoDao;	    @Override    protected TSlotInfoDao getDao() {        return tSlotInfoDao;    }    @Override    public List<TSlotInfoEntity> listSlot(Map<String, Object> parameter) {        List<TSlotInfoEntity> reuslt = getDao().listSlot(parameter);        return reuslt;    }        @Override    public TSlotInfoEntity saveTSlotInfo(TSlotInfoEntity model) {    	if(null == model) {            throw new BusinessException("保存对象不能为空!");    	}    	model.setSidown(0);    	if(StringUtils.isBlank(model.getId())) {    		super.save(model);    	}else {    		super.update(model);    	}    	        return model;    }    @Override    public int updateProduct(TSlotInfoEntity model) {        if (model == null) {            throw new BusinessException("保存对象不能为空");        }        if (MyStringUtil.isBlank(model.getId())) {            throw new BusinessException("保存对象id不能为空");        }        TSlotInfoEntity updateModel = new TSlotInfoEntity();        updateModel.setId(model.getId());        updateModel.setSibarcode(model.getSibarcode());        updateModel.setSidown(0);        return getDao().update(updateModel);    }    @Override    public int updateCapacity(TSlotInfoEntity model) {        if (model == null) {            throw new BusinessException("保存对象不能为空");        }        if (MyStringUtil.isBlank(model.getId())) {            throw new BusinessException("保存对象id不能为空");        }        TSlotInfoEntity updateModel = new TSlotInfoEntity();        updateModel.setId(model.getId());        updateModel.setSicapacity(model.getSicapacity());        updateModel.setSidown(0);        return getDao().update(updateModel);    }    @Override    public int updatePrice(TSlotInfoEntity model) {        if (model == null) {            throw new BusinessException("保存对象不能为空");        }        if (MyStringUtil.isBlank(model.getId())) {            throw new BusinessException("保存对象id不能为空");        }        TSlotInfoEntity updateModel = new TSlotInfoEntity();        updateModel.setId(model.getId());        updateModel.setSiprice(model.getSiprice());        updateModel.setSidown(0);        return getDao().update(updateModel);    }    @Override    public TSlotInfoEntity getDeviceSlot(String did) {        if (MyStringUtil.isBlank(did)) {            throw new BusinessException("传入对象id不能为空");        }        TSlotInfoEntity model = new TSlotInfoEntity();        Map<String, Object> queryMap = Maps.newHashMap();        queryMap.put("sidid", did);        queryMap.put("siworkstatus", "1");        List<TSlotInfoEntity> slotList = listSlot(queryMap);        model.setSlotList(slotList);                return model;    }    @Override    public TSlotInfoEntity saveDeviceSlot(TSlotInfoEntity model) {        if (model == null) {            throw new BusinessException("保存对象不能为空");        }                if(CollectionUtils.isNotEmpty(model.getSlotList())) {        	TSlotInfoEntity slotInfoEntity = null;    		for(TSlotInfoEntity slotInfo : model.getSlotList()) {    			slotInfoEntity = new TSlotInfoEntity();    			slotInfoEntity.setId(slotInfo.getId());    			slotInfoEntity.setSibarcode(slotInfo.getSibarcode());// 商品编码    			slotInfoEntity.setSicapacity(slotInfo.getSicapacity());// 货道容量    			slotInfoEntity.setSistockquantity(slotInfo.getSistockquantity());// 库存数量    			slotInfoEntity.setSiprice(slotInfo.getSiprice());// 自定义价格    			slotInfoEntity.setSidown(0);    			super.update(slotInfoEntity);    		}        }    	    	return model;    }        @Override    public void updateSiDown(String did) {    	if(MyStringUtil.isNotBlank(did)) {    		Map<String, Object> queryMap = Maps.newHashMap();    		queryMap.put("sidid", did);    		List<TSlotInfoEntity> queryList = super.list(queryMap);    		if(CollectionUtils.isNotEmpty(queryList)) {    			TSlotInfoEntity slotInfoEntity = queryList.get(0);    			slotInfoEntity.setSidown(0);    			super.update(slotInfoEntity);    		}    	}    }    }