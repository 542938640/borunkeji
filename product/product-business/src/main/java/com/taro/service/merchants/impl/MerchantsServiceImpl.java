package com.taro.service.merchants.impl;import java.util.Date;import java.util.List;import java.util.Map;import org.apache.commons.lang3.StringUtils;import org.apache.commons.lang3.time.DateFormatUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.alibaba.fastjson.JSONObject;import com.github.pagehelper.PageHelper;import com.taro.annotation.WorkFlow;import com.taro.common.Page;import com.taro.constants.Constant;import com.taro.dao.merchants.MerchantsDao;import com.taro.entity.ProcessDataEntity;import com.taro.entity.WorkFlowBean;import com.taro.entity.merchants.MerchantsCheckEntity;import com.taro.entity.merchants.MerchantsEntity;import com.taro.entity.merchants.MerchantsStoreEntity;import com.taro.exception.BusinessException;import com.taro.service.AbstractService;import com.taro.service.file.FileManageService;import com.taro.service.merchants.MerchantsService;import com.taro.service.merchants.MerchantsStoreService;import com.taro.utils.MyStringUtil;import com.taro.utils.SecurityMyUtils;/** *<p>Title:MerchantsServiceImpl.java</p> *<p>Description:商户 ServiceImpl</p> *@author 张宇唯 *@version 1.0 *@Automatically generate by Coder in 2020-12-18 14:17:41 */@Servicepublic class MerchantsServiceImpl extends AbstractService<MerchantsEntity> implements MerchantsService {		@Autowired	private MerchantsDao merchantsDao;	    @Override    protected MerchantsDao getDao() {        return merchantsDao;    }	@Autowired	private FileManageService fileManageService;    	@Autowired	private MerchantsStoreService merchantsStoreService;    @Override    public Page<MerchantsEntity> listStore(int pageNum, int pageSize, Map<String, Object> parameter) {        PageHelper.startPage(pageNum, pageSize, pageNum == 0 ? false : true);        List<MerchantsEntity> reuslt = getDao().listStore(parameter);        Page<MerchantsEntity> page = new Page<>(reuslt);        return page;    }    @Override    public MerchantsEntity saveMerchants (MerchantsEntity model) {    	if(null == model) {            throw new BusinessException("保存对象不能为空!");    	}    	    	if(StringUtils.isBlank(model.getId())) {    		super.save(model);    	}else {    		super.update(model);    	}    	        return model;    }    @WorkFlow(id = "id", isStartAndComplete = true)    @Override    public MerchantsEntity startAutoWorkFlow(MerchantsStoreEntity model) {    	if(null == model) {            throw new BusinessException("保存对象不能为空!");    	}else if(MyStringUtil.isBlank(model.getMerchants_pid())) {            throw new BusinessException("商家id不能为空!");    	}else if(MyStringUtil.isBlank(model.getStore_name())) {            throw new BusinessException("门店名称不能为空!");    	}else if(MyStringUtil.isBlank(model.getBusi_permit())) {            throw new BusinessException("营业执照不能为空!");    	}    	String merchants_pid = model.getMerchants_pid();    	MerchantsEntity merchantsEntity = super.get(merchants_pid);    	if(null == merchantsEntity) {            throw new BusinessException("商家id查询为空!");    	}    	model.setTenants_pid(merchantsEntity.getTenants_pid());    	    	// 激活图片    	if(StringUtils.isNotBlank(model.getFront_image())) {    		fileManageService.activation(model.getFront_image());    	}    	if(StringUtils.isNotBlank(model.getStore_image1())) {    		fileManageService.activation(model.getStore_image1());    	}    	if(StringUtils.isNotBlank(model.getStore_image2())) {    		fileManageService.activation(model.getStore_image2());    	}    	if(StringUtils.isNotBlank(model.getStore_image3())) {    		fileManageService.activation(model.getStore_image3());    	}    	if(StringUtils.isNotBlank(model.getBusi_permit())) {    		fileManageService.activation(model.getBusi_permit());    	}    	if(StringUtils.isNotBlank(model.getBusi_license())) {    		fileManageService.activation(model.getBusi_license());    	}    	// 删除前端已删除的文件    	if(StringUtils.isNotBlank(model.getDeleteFileId())) {    		fileManageService.deleteFile(model.getDeleteFileId());    	}		// 启动流程		WorkFlowBean workFlowData = new WorkFlowBean();		workFlowData.setBusi_key(merchants_pid);		workFlowData.setFlow_key(Constant.METCHANTS_FLOW_KEY);		workFlowData.setIs_start(1);		workFlowData.setStart_user(SecurityMyUtils.getUserId());		JSONObject variables = new JSONObject();		variables.put("tenants_pid", model.getTenants_pid());		variables.put("idea", "1");		variables.put("idea_message", "");		variables.put("operation_user", SecurityMyUtils.getUserId());		variables.put("operation_time", DateFormatUtils.format(new Date(), Constant.DF_DATE_YYYYMMDDHHMMSS));		workFlowData.setVariables_json(variables.toJSONString());		    	MerchantsStoreEntity oldModel = merchantsStoreService.getByMerchants(merchants_pid);    	if(null == oldModel) {    		merchantsStoreService.save(model);    		merchantsEntity.setWorkFlowData(workFlowData);    	}else {    		String old_store_name = oldModel.getStore_name();    		String old_busi_permit = oldModel.getBusi_permit();    		String store_name = model.getStore_name();    		String busi_permit = model.getBusi_permit();    		//    		// 修改了门店名称或营业执照需要重新审核//    		if(!old_store_name.equals(store_name) || !old_busi_permit.equals(busi_permit)) {//    			model.setStore_name(old_store_name);//    			model.setBusi_permit(old_busi_permit);//    			//    			model.setC4(store_name);//    			model.setC5(busi_permit);//    			merchantsEntity.setWorkFlowData(workFlowData);//    		}    		String isWorkFlow = model.getIsWorkFlow();    		if(MyStringUtil.isNotBlank(isWorkFlow) && "1".equals(isWorkFlow)) {    			model.setStore_name(old_store_name);    			model.setBusi_permit(old_busi_permit);    			    			model.setC4(store_name);    			model.setC5(busi_permit);    			merchantsEntity.setWorkFlowData(workFlowData);    		}    		        	model.setId(oldModel.getId());    		merchantsStoreService.update(model);    	}    	        return merchantsEntity;    }        @WorkFlow(id="id")    @Override    public MerchantsEntity checkAutoWorkFlow(MerchantsCheckEntity checkModel) {    	if(null == checkModel) {            throw new BusinessException("保存对象不能为空!");    	}else if(MyStringUtil.isBlank(checkModel.getId())) {            throw new BusinessException("业务id不能为空!");    	}else if(MyStringUtil.isBlank(checkModel.getIdea())) {            throw new BusinessException("审核结果不能为空!");    	}else if("0".equals(checkModel.getIdea()) && MyStringUtil.isBlank(checkModel.getIdea_message())) {            throw new BusinessException("退回时退回原因不能为空!");    	}    	String id = checkModel.getId();    	MerchantsEntity model = super.get(id);    	if(null == model) {            throw new BusinessException("业务id查询为空!");    	}else if(Constant.FLOW_STATE_END.equals(model.getFlow_state())) {            throw new BusinessException("业务流程已结束,不能进行审核!");    	}		// 审核流程		WorkFlowBean workFlowData = new WorkFlowBean();		workFlowData.setBusi_key(id);		workFlowData.setFlow_key(Constant.METCHANTS_FLOW_KEY);		workFlowData.setAssignee(SecurityMyUtils.getUserId());		JSONObject variables = new JSONObject();		variables.put("tenants_pid", model.getTenants_pid());		variables.put("idea", checkModel.getIdea());		variables.put("idea_message", checkModel.getIdea_message());		variables.put("operation_user", SecurityMyUtils.getUserId());		variables.put("operation_time", DateFormatUtils.format(new Date(), Constant.DF_DATE_YYYYMMDDHHMMSS));		workFlowData.setVariables_json(variables.toJSONString());		model.setWorkFlowData(workFlowData);    	    	return model;    }        // 工作流回调方法    @Override    public void workFlowCallback(ProcessDataEntity processData){    	if(null != processData) {    		String id = processData.getBusi_key();    		String flow_state = processData.getFlow_state();    		        	MerchantsEntity model = new MerchantsEntity();    		if(Constant.FLOW_STATE_END.equals(flow_state)) {    			model.setStatus("1");        		MerchantsEntity oldModel = getDao().get(id);        		// 已入驻    			if("1".equals(oldModel.getStatus())) {    		    	MerchantsStoreEntity storeModel = merchantsStoreService.getByMerchants(id);    		    	if(null != storeModel) {    		    		storeModel.setStore_name(storeModel.getC4());    		    		storeModel.setBusi_permit(storeModel.getC5());    		    	}    			}    		}    		        	model.setId(id);        	model.setFlow_check_result(processData.getIdea());        	model.setFlow_check_opinion(processData.getIdea_message());        	model.setFlow_check_user(processData.getOperation_user());        	model.setFlow_check_time(processData.getOperation_time());        	model.setFlow_state(processData.getFlow_state());        	model.setFlow_task_id(processData.getTask_id());        	model.setFlow_task_def(processData.getTask_def());        	model.setFlow_task_name(processData.getTask_name());        	getDao().update(model);    	}    }    @WorkFlow(id = "id", isStartAndComplete = true)    @Override    public MerchantsEntity actAutoWorkFlow() {    	MerchantsEntity model = new MerchantsEntity();    	model.setTenants_pid(SecurityMyUtils.getTenantsId());    	super.save(model);		// 启动流程		WorkFlowBean workFlowData = new WorkFlowBean();		workFlowData.setBusi_key(model.getId());		workFlowData.setFlow_key(Constant.METCHANTS_FLOW_KEY);		workFlowData.setIs_start(1);		workFlowData.setStart_user(SecurityMyUtils.getUserId());		JSONObject variables = new JSONObject();		variables.put("tenants_pid", model.getTenants_pid());		variables.put("idea", "1");		variables.put("idea_message", "");		variables.put("operation_user", SecurityMyUtils.getUserId());		variables.put("operation_time", DateFormatUtils.format(new Date(), Constant.DF_DATE_YYYYMMDDHHMMSS));		workFlowData.setVariables_json(variables.toJSONString());		model.setWorkFlowData(workFlowData);    	    	return model;    }    @Override    public MerchantsEntity getStore(String id) {        if (MyStringUtil.isBlank(id)) {            throw new BusinessException("传入对象id不能为空");        }        return getDao().getStore(id);    }}