package com.taro.service.merchants.impl;import java.util.ArrayList;import java.util.Date;import java.util.List;import java.util.Map;import org.apache.commons.collections4.CollectionUtils;import org.apache.commons.lang3.StringUtils;import org.apache.commons.lang3.time.DateFormatUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.alibaba.fastjson.JSONObject;import com.github.pagehelper.PageHelper;import com.google.common.collect.Lists;import com.google.common.collect.Maps;import com.taro.annotation.WorkFlow;import com.taro.common.Page;import com.taro.constants.Constant;import com.taro.dao.merchants.MerchantsCouponDao;import com.taro.entity.ProcessDataEntity;import com.taro.entity.WorkFlowBean;import com.taro.entity.merchants.MerchantsCheckEntity;import com.taro.entity.merchants.MerchantsCouponEntity;import com.taro.entity.merchants.MerchantsCouponReqEntity;import com.taro.entity.merchants.MerchantsCouponShareEntity;import com.taro.entity.merchants.MerchantsEntity;import com.taro.entity.pub.PubDicEntity;import com.taro.entity.sec.SecTenantsEntity;import com.taro.exception.BusinessException;import com.taro.service.AbstractService;import com.taro.service.file.FileManageService;import com.taro.service.merchants.MerchantsCouponReqService;import com.taro.service.merchants.MerchantsCouponService;import com.taro.service.merchants.MerchantsCouponShareService;import com.taro.service.merchants.MerchantsService;import com.taro.service.pub.PubDicService;import com.taro.service.sec.SecTenantsService;import com.taro.utils.MyStringUtil;import com.taro.utils.SecurityMyUtils;/** *<p>Title:MerchantsCouponServiceImpl.java</p> *<p>Description:商户优惠券 ServiceImpl</p> *@author 张宇唯 *@version 1.0 *@Automatically generate by Coder in 2020-12-17 19:21:30 */@Servicepublic class MerchantsCouponServiceImpl extends AbstractService<MerchantsCouponEntity> implements MerchantsCouponService {		@Autowired	private MerchantsCouponDao merchantsCouponDao;	    @Override    protected MerchantsCouponDao getDao() {        return merchantsCouponDao;    }	@Autowired	private FileManageService fileManageService;		@Autowired	private MerchantsService merchantsService;	@Autowired	private MerchantsCouponReqService merchantsCouponReqService;	@Autowired	private MerchantsCouponShareService merchantsCouponShareService;		@Autowired	private SecTenantsService secTenantsService;	@Autowired	private PubDicService pubDicService;    @Override    public List<MerchantsCouponEntity> listCouponByTrade(Map<String, Object> parameter) {    	List<MerchantsCouponEntity> list = null;    	Map<String, Object> queryMap = Maps.newHashMap();    	queryMap.put("sysFlag", "1");    	queryMap.put("base_code", "MerchantsTrade");    	List<PubDicEntity> tradeList = pubDicService.listByBase(queryMap);    	if(CollectionUtils.isNotEmpty(tradeList)) {    		list = new ArrayList<>(tradeList.size());    		MerchantsCouponEntity coupon = null;    		List<MerchantsCouponEntity> couponList = null;    		for(PubDicEntity dic : tradeList) {    			coupon = new MerchantsCouponEntity();    			coupon.setStore_trade(dic.getName());    			parameter.put("store_trade", dic.getId());    			couponList = getDao().listLocalCoupon(parameter);    			if(CollectionUtils.isNotEmpty(couponList)) {    				coupon.setCouponList(couponList);    			}    			list.add(coupon);    		}    	}        return list;    }        @Override    public Page<MerchantsCouponEntity> listCoupon(int pageNum, int pageSize, Map<String, Object> parameter) {        PageHelper.startPage(pageNum, pageSize, pageNum == 0 ? false : true);        List<MerchantsCouponEntity> reuslt = getDao().listCoupon(parameter);        Page<MerchantsCouponEntity> page = new Page<MerchantsCouponEntity>(reuslt);        return page;    }    @Override    public MerchantsCouponEntity saveMerchantsCoupon(MerchantsCouponEntity model) {    	if(null == model) {            throw new BusinessException("保存对象不能为空!");    	}    	    	if(StringUtils.isBlank(model.getId())) {    		super.save(model);    	}else {    		super.update(model);    	}    	        return model;    }    @WorkFlow(id = "id", isStartAndComplete = true)    @Override    public MerchantsCouponEntity startAutoWorkFlow(MerchantsCouponEntity model) {    	if(null == model) {            throw new BusinessException("保存对象不能为空!");    	}else if(MyStringUtil.isBlank(model.getMerchants_pid())) {            throw new BusinessException("商家id不能为空!");    	}else if(MyStringUtil.isBlank(model.getCoupon_name())) {            throw new BusinessException("优惠券名称不能为空!");    	}else if(MyStringUtil.isBlank(model.getCoupon_type())) {            throw new BusinessException("优惠券类型不能为空!");    	}else if("1".equals(model.getCoupon_type()) && null == model.getFull_value()) {            throw new BusinessException("满多少元可用不能为空!");    	}else if(null == model.getFrant_num()) {            throw new BusinessException("发放数量不能为空!");    	}    	String merchants_pid = model.getMerchants_pid();    	MerchantsEntity merchantsEntity = merchantsService.get(merchants_pid);    	if(null == merchantsEntity) {            throw new BusinessException("商家id查询为空!");    	}else if(!"1".equals(merchantsEntity.getStatus())) {            throw new BusinessException("商家还未入驻,请确认!");    	}    	    	// 激活图片    	if(StringUtils.isNotBlank(model.getImage1())) {    		fileManageService.activation(model.getImage1());    	}    	if(StringUtils.isNotBlank(model.getImage2())) {    		fileManageService.activation(model.getImage2());    	}    	if(StringUtils.isNotBlank(model.getImage3())) {    		fileManageService.activation(model.getImage3());    	}    	// 删除前端已删除的文件    	if(StringUtils.isNotBlank(model.getDeleteFileId())) {    		fileManageService.deleteFile(model.getDeleteFileId());    	}    	    	model.setTenants_pid(merchantsEntity.getTenants_pid());    	model.setReq_num(0);    	model.setLogout_num(0);    	model.setStatus("0");// 草稿箱    	model.setEnable("1");// 启用    	model.setIs_share("1");// 允许共享    	    	super.save(model);		// 启动流程		WorkFlowBean workFlowData = new WorkFlowBean();		workFlowData.setBusi_key(model.getId());		workFlowData.setFlow_key(Constant.METCHANTS_COUPON_FLOW_KEY);		workFlowData.setIs_start(1);		workFlowData.setStart_user(SecurityMyUtils.getUserId());		JSONObject variables = new JSONObject();		variables.put("tenants_pid", model.getTenants_pid());		variables.put("idea", "1");		variables.put("idea_message", "");		variables.put("operation_user", SecurityMyUtils.getUserId());		variables.put("operation_time", DateFormatUtils.format(new Date(), Constant.DF_DATE_YYYYMMDDHHMMSS));		workFlowData.setVariables_json(variables.toJSONString());		model.setWorkFlowData(workFlowData);		        return model;    }        @WorkFlow(id="id")    @Override    public MerchantsCouponEntity checkAutoWorkFlow(MerchantsCheckEntity checkModel) {    	if(null == checkModel) {            throw new BusinessException("保存对象不能为空!");    	}else if(MyStringUtil.isBlank(checkModel.getId())) {            throw new BusinessException("业务id不能为空!");    	}else if(MyStringUtil.isBlank(checkModel.getIdea())) {            throw new BusinessException("审核结果不能为空!");    	}else if("0".equals(checkModel.getIdea()) && MyStringUtil.isBlank(checkModel.getIdea_message())) {            throw new BusinessException("退回时退回原因不能为空!");    	}    	String id = checkModel.getId();    	MerchantsCouponEntity model = super.get(id);    	if(null == model) {            throw new BusinessException("业务id查询为空!");    	}else if(Constant.FLOW_STATE_END.equals(model.getFlow_state())) {            throw new BusinessException("业务流程已结束,不能进行审核!");    	}		// 审核流程		WorkFlowBean workFlowData = new WorkFlowBean();		workFlowData.setBusi_key(id);		workFlowData.setFlow_key(Constant.METCHANTS_COUPON_FLOW_KEY);		JSONObject variables = new JSONObject();		variables.put("tenants_pid", model.getTenants_pid());		variables.put("idea", checkModel.getIdea());		variables.put("idea_message", checkModel.getIdea_message());		variables.put("operation_user", SecurityMyUtils.getUserId());		variables.put("operation_time", DateFormatUtils.format(new Date(), Constant.DF_DATE_YYYYMMDDHHMMSS));		workFlowData.setVariables_json(variables.toJSONString());		model.setWorkFlowData(workFlowData);    	    	return model;    }        // 工作流回调方法    @Override    public void workFlowCallback(ProcessDataEntity processData){    	if(null != processData) {    		MerchantsCouponEntity model = super.get(processData.getBusi_key());    		if(null != model) {            	model.setFlow_check_result(processData.getIdea());            	model.setFlow_check_opinion(processData.getIdea_message());            	model.setFlow_check_user(processData.getOperation_user());            	model.setFlow_check_time(processData.getOperation_time());            	model.setFlow_state(processData.getFlow_state());            	model.setFlow_task_id(processData.getTask_id());            	model.setFlow_task_def(processData.getTask_def());            	model.setFlow_task_name(processData.getTask_name());            	super.update(model);    		}    	}    }        @Override    public MerchantsCouponEntity saveFrantNum(MerchantsCouponEntity model) {    	if(null == model) {            throw new BusinessException("保存对象不能为空!");    	}else if(MyStringUtil.isBlank(model.getId())) {            throw new BusinessException("优惠券id不能为空!");    	}else if(null == model.getFrant_num()) {            throw new BusinessException("发放数量不能为空!");    	}    	MerchantsCouponEntity saveModel = super.get(model.getId());    	if(null == saveModel || "0".equals(saveModel.getSysFlag())) {            throw new BusinessException("优惠券id查询为空!");    	}else if(model.getFrant_num() < saveModel.getReq_num()) {            throw new BusinessException("优惠券发放数量不能小于已领取数量!");    	}    	    	saveModel.setFrant_num(model.getFrant_num());    	super.update(saveModel);    	    	return saveModel;    }        @Override    public MerchantsCouponEntity saveStatus(MerchantsCouponEntity model) {    	if(null == model) {            throw new BusinessException("保存对象不能为空!");    	}else if(MyStringUtil.isBlank(model.getId())) {            throw new BusinessException("优惠券id不能为空!");    	}else if(MyStringUtil.isBlank(model.getStatus())) {            throw new BusinessException("优惠券状态不能为空!");    	}    	MerchantsCouponEntity saveModel = super.get(model.getId());    	if(null == saveModel || "0".equals(saveModel.getSysFlag())) {            throw new BusinessException("优惠券id查询为空!");    	}    	saveModel.setStatus(model.getStatus());    	super.update(saveModel);    	    	return saveModel;    }        @Override    public MerchantsCouponEntity saveEnable(MerchantsCouponEntity model) {    	if(null == model) {            throw new BusinessException("保存对象不能为空!");    	}else if(MyStringUtil.isBlank(model.getId())) {            throw new BusinessException("优惠券id不能为空!");    	}else if(MyStringUtil.isBlank(model.getEnable())) {            throw new BusinessException("优惠券启用状态不能为空!");    	}    	MerchantsCouponEntity saveModel = super.get(model.getId());    	if(null == saveModel || "0".equals(saveModel.getSysFlag())) {            throw new BusinessException("优惠券id查询为空!");    	}    	saveModel.setEnable(model.getEnable());    	super.update(saveModel);    	    	return saveModel;    }        @Override    public MerchantsCouponEntity saveIsShare(MerchantsCouponEntity model) {    	if(null == model) {            throw new BusinessException("保存对象不能为空!");    	}else if(MyStringUtil.isBlank(model.getId())) {            throw new BusinessException("优惠券id不能为空!");    	}else if(MyStringUtil.isBlank(model.getIs_share())) {            throw new BusinessException("优惠券共享状态不能为空!");    	}    	MerchantsCouponEntity saveModel = super.get(model.getId());    	if(null == saveModel || "0".equals(saveModel.getSysFlag())) {            throw new BusinessException("优惠券id查询为空!");    	}    	saveModel.setIs_share(model.getIs_share());    	super.update(saveModel);    	    	return saveModel;    }    @WorkFlow(id = "id", isStartAndComplete = true)    @Override    public MerchantsCouponEntity actAutoWorkFlow() {    	MerchantsCouponEntity model = new MerchantsCouponEntity();    	model.setTenants_pid(SecurityMyUtils.getTenantsId());    	super.save(model);		// 启动流程		WorkFlowBean workFlowData = new WorkFlowBean();		workFlowData.setBusi_key(model.getId());		workFlowData.setFlow_key(Constant.METCHANTS_COUPON_FLOW_KEY);		workFlowData.setIs_start(1);		workFlowData.setStart_user(SecurityMyUtils.getUserId());		JSONObject variables = new JSONObject();		variables.put("tenants_pid", model.getTenants_pid());		variables.put("idea", "1");		variables.put("idea_message", "");		variables.put("operation_user", SecurityMyUtils.getUserId());		variables.put("operation_time", DateFormatUtils.format(new Date(), Constant.DF_DATE_YYYYMMDDHHMMSS));		workFlowData.setVariables_json(variables.toJSONString());		model.setWorkFlowData(workFlowData);    	    	return model;    }        @Override    public MerchantsCouponReqEntity saveLogout(MerchantsCouponReqEntity model) {    	if(null == model) {            throw new BusinessException("保存对象不能为空!");    	}else if(MyStringUtil.isBlank(model.getMerchants_pid())) {            throw new BusinessException("商户id不能为空!");    	}else if(MyStringUtil.isBlank(model.getReq_code())) {            throw new BusinessException("优惠券领取码不能为空!");    	}    	    	Map<String, Object> queryMap = Maps.newHashMap();    	queryMap.put("merchants_pid", model.getMerchants_pid());    	queryMap.put("req_code", model.getReq_code());    	queryMap.put("sysFlag", "1");    	List<MerchantsCouponReqEntity> queryList = merchantsCouponReqService.list(queryMap);    	if(CollectionUtils.isEmpty(queryList)) {            throw new BusinessException("优惠券领取码查询为空!");    	}    	MerchantsCouponReqEntity saveModel = queryList.get(0);    	    	String coupon_pid = saveModel.getCoupon_pid();    	MerchantsCouponEntity coupon = super.get(coupon_pid);    	if(null == coupon) {            throw new BusinessException("优惠券id查询为空!");    	}else if("0".equals(coupon.getEnable()) || "0".equals(coupon.getSysFlag())) {            throw new BusinessException("优惠卷已停用,请确认!");    	}else if(!"1".equals(coupon.getEnable())) {            throw new BusinessException("优惠卷已结束,请确认!");    	}else if("1".equals(coupon.getC1())) {            throw new BusinessException("优惠卷已使用,请确认!");    	}    	    	saveModel.setC1("1");// 已核销    	merchantsCouponReqService.update(saveModel);    			getDao().updateLogoutNum(coupon_pid);    	        return model;    }    @Override    public Page<MerchantsCouponEntity> listLocalCoupon(int pageNum, int pageSize, Map<String, Object> parameter) {        PageHelper.startPage(pageNum, pageSize, pageNum == 0 ? false : true);        List<MerchantsCouponEntity> reuslt = getDao().listLocalCoupon(parameter);        Page<MerchantsCouponEntity> page = new Page<MerchantsCouponEntity>(reuslt);        return page;    }    @Override    public Page<MerchantsCouponEntity> listShareCoupon(int pageNum, int pageSize, Map<String, Object> parameter) {        PageHelper.startPage(pageNum, pageSize, pageNum == 0 ? false : true);        if(null == parameter || !parameter.containsKey("tenants_pid")) {            throw new BusinessException("租户id不能为空!");        }                List<MerchantsCouponEntity> reuslt = null;                String tenants_pid = String.valueOf(parameter.get("tenants_pid"));        Map<String, Object> queryMap = Maps.newHashMap();        queryMap.put("id", tenants_pid);        queryMap.put("level", 3);        SecTenantsEntity parentTenantsEntity = secTenantsService.getParentByLevel(queryMap);        if(null == parentTenantsEntity) {        	reuslt = Lists.newArrayList();        }else {            parameter.put("parent_tenants_pid", parentTenantsEntity.getId());            reuslt = getDao().listShareCoupon(parameter);        }        Page<MerchantsCouponEntity> page = new Page<MerchantsCouponEntity>(reuslt);        return page;    }        @Override    public MerchantsCouponEntity saveShare(MerchantsCouponEntity model) {    	if(null == model) {            throw new BusinessException("保存对象不能为空!");    	}else if(MyStringUtil.isBlank(model.getIs_share())) {            throw new BusinessException("优惠券共享状态不能为空!");    	}else if(MyStringUtil.isBlank(model.getId())) {            throw new BusinessException("优惠券id不能为空!");    	}    	MerchantsCouponEntity coupon = super.get(model.getId());    	if(null == coupon || "0".equals(coupon.getSysFlag())) {            throw new BusinessException("优惠券id查询为空!");    	}    	    	MerchantsCouponShareEntity saveModel = null;    	List<MerchantsCouponShareEntity> queryList = null;    	Map<String, Object> queryMap = Maps.newHashMap();    	queryMap.put("coupon_pid", model.getId());    	queryMap.put("share_pid", model.getTenants_pid());    	String isShare = model.getIs_share();    	if("1".equals(isShare)) {// 加入本地        	queryMap.put("sysFlag", "0");        	queryList = merchantsCouponShareService.list(queryMap);        	if(CollectionUtils.isNotEmpty(queryList)) {        		saveModel = queryList.get(0);        		saveModel.setSysFlag("1");        		merchantsCouponShareService.update(saveModel);        	}else {        		saveModel = new MerchantsCouponShareEntity();        		saveModel.setCoupon_pid(model.getId());        		saveModel.setShare_pid(model.getTenants_pid());        		merchantsCouponShareService.save(saveModel);        	}    	}else if("0".equals(isShare)) {// 移除本地        	queryMap.put("sysFlag", "1");        	queryList = merchantsCouponShareService.list(queryMap);        	if(CollectionUtils.isNotEmpty(queryList)) {        		for(MerchantsCouponShareEntity share : queryList) {            		merchantsCouponShareService.delete(share.getId());        		}        	}    	}    	    	return model;    }    }