package com.taro.service.market.impl;import java.util.List;import java.util.Map;import org.apache.commons.collections4.CollectionUtils;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.google.common.collect.Lists;import com.google.common.collect.Maps;import com.taro.dao.market.MarketPayActDao;import com.taro.entity.market.MarketPayActEntity;import com.taro.entity.market.MarketPayActPrizeEntity;import com.taro.exception.BusinessException;import com.taro.service.AbstractService;import com.taro.service.device.TSlotInfoService;import com.taro.service.file.FileManageService;import com.taro.service.market.MarketPayActPrizeService;import com.taro.service.market.MarketPayActService;import com.taro.utils.MyStringUtil;import com.taro.utils.UuidUtil;/** *<p>Title:MarketPayActServiceImpl.java</p> *<p>Description:支付活动 ServiceImpl</p> *@author 张宇唯 *@version 1.0 *@Automatically generate by Coder in 2020-10-27 00:21:32 */@Servicepublic class MarketPayActServiceImpl extends AbstractService<MarketPayActEntity> implements MarketPayActService {		@Autowired	private MarketPayActDao marketPayActDao;	    @Override    protected MarketPayActDao getDao() {        return marketPayActDao;    }	@Autowired	private MarketPayActPrizeService MarketPayActPrizeService;		@Autowired	private FileManageService fileManageService;	@Autowired	private TSlotInfoService tSlotInfoService;	    @Override    public MarketPayActEntity saveMarketPayAct(MarketPayActEntity model) {    	if(null == model) {            throw new BusinessException("保存对象不能为空!");    	}    	MarketPayActEntity saveModel = new MarketPayActEntity();    	saveModel.setDevice_did(model.getDevice_did());    	saveModel.setType(model.getType());    	saveModel.setAct_id(model.getAct_id());    	saveModel.setAct_name(model.getAct_name());    	saveModel.setStart_time(model.getStart_time());    	saveModel.setEnd_time(model.getEnd_time());    	saveModel.setContent(model.getContent());    	saveModel.setCompany(model.getCompany());    	saveModel.setPhone(model.getPhone());    	saveModel.setIs_number(model.getIs_number());    	saveModel.setNumber(model.getNumber());    	saveModel.setIs_coupon_code(model.getIs_coupon_code());    	saveModel.setCoupon_code_image(model.getCoupon_code_image());    	//激活照片    	if(StringUtils.isNotBlank(model.getCoupon_code_image())) {    		fileManageService.activation(model.getCoupon_code_image());    	}    	//删除前端已删除的文件    	if(StringUtils.isNotBlank(model.getDeleteFileId())) {    		fileManageService.deleteFile(model.getDeleteFileId());    	}    	    	if(StringUtils.isBlank(model.getId())) {    		Map<String, Object> queryMap = Maps.newHashMap();    		queryMap.put("type", model.getType());    		queryMap.put("device_did", model.getDevice_did());    		Long count = getDao().listCount(queryMap);    		    		saveModel.setAct_id(String.valueOf(count + 1));    		saveModel.setStatus("0");// 待上线    		super.save(saveModel);    		    		// 先保存奖品    		MarketPayActPrizeEntity prize = null;    		for(int i = 1; i <= 6; i++) {    			prize = new MarketPayActPrizeEntity();    			prize.setPayact_pid(saveModel.getId());    			prize.setPrize_type("1");    			prize.setPrize_image(UuidUtil.get32UUID());    			prize.setVip_price(0D);    			prize.setPrice(0D);    			prize.setSort(i);    			prize.setC1("1");// 启用    			MarketPayActPrizeService.save(prize);    		}    		    	}else {    		saveModel.setId(model.getId());    		super.update(saveModel);    	}    	        return saveModel;    }    @Override    public MarketPayActEntity saveMarketPayActPrize(MarketPayActEntity model) {    	if(null == model) {            throw new BusinessException("保存对象不能为空!");    	}    	//删除前端已删除的文件    	if(StringUtils.isNotBlank(model.getDeleteFileId())) {    		fileManageService.deleteFile(model.getDeleteFileId());    	}    	    	if(CollectionUtils.isNotEmpty(model.getPrizeList())) {    		for(MarketPayActPrizeEntity prize : model.getPrizeList()) {    	    	//激活照片    	    	if(StringUtils.isNotBlank(prize.getPrize_image())) {    	    		fileManageService.activation(prize.getPrize_image());    	    	}    	    	MarketPayActPrizeService.update(prize);    		}    	}    	        return model;    }        @Override    public MarketPayActEntity saveMarketPayActRule(MarketPayActEntity model) {    	if(null == model) {            throw new BusinessException("保存对象不能为空!");    	}    	    	MarketPayActEntity updateModel = new MarketPayActEntity();    	updateModel.setId(model.getId());    	updateModel.setIs_specific_user(model.getIs_specific_user());    	updateModel.setSpecific_user(model.getSpecific_user());    	updateModel.setIs_frequency(model.getIs_frequency());    	updateModel.setFrequency_num(model.getFrequency_num());    	updateModel.setFrequency_max_num(model.getFrequency_max_num());    	updateModel.setIs_register(model.getIs_register());    	super.update(updateModel);    	    	if(CollectionUtils.isNotEmpty(model.getPrizeList())) {    		MarketPayActPrizeEntity prizeUpdateModel = null;    		for(MarketPayActPrizeEntity prize : model.getPrizeList()) {    			prizeUpdateModel = new MarketPayActPrizeEntity();    			prizeUpdateModel.setId(prize.getId());    	    	MarketPayActPrizeService.update(prize);    		}    	}    	        return updateModel;    }        @Override    public MarketPayActEntity goOnline(String id) {    	if(MyStringUtil.isBlank(id)) {            throw new BusinessException("保存对象id不能为空!");    	}    	    	MarketPayActEntity model = super.get(id);    	if(null == model) {            throw new BusinessException("查询对象为空!");    	}    	    	Map<String, Object> queryMap = Maps.newHashMap();    	queryMap.put("sysFlag", "1");    	queryMap.put("device_did", model.getDevice_did());		queryMap.put("type", model.getType());    	queryMap.put("status", "1");    	List<MarketPayActEntity> queryList = super.list(queryMap);    	if(CollectionUtils.isNotEmpty(queryList)) {    		for(MarketPayActEntity payAct: queryList) {    			payAct.setStatus("2");// 移至历史    			super.update(payAct);    		}    	}    	    	model.setStatus("1");    	super.update(model);    	    	// 通知socket活动更新    	tSlotInfoService.updateSiDown(model.getDevice_did());    	        return model;    }    @Override    public MarketPayActEntity getRunByDevice(String device_did, String type) {        if (MyStringUtil.isBlank(device_did)) {            throw new BusinessException("传入对象id不能为空");        }        if (MyStringUtil.isBlank(type)) {            throw new BusinessException("传入type不能为空");        }                boolean flag = true;                MarketPayActEntity model = null;                Map<String, Object> queryMap = Maps.newHashMap();    	queryMap.put("sysFlag", "1");    	queryMap.put("device_did", device_did);		queryMap.put("type", type);    	queryMap.put("status", "1");    	List<MarketPayActEntity> queryList = super.list(queryMap);    	if(CollectionUtils.isNotEmpty(queryList)) {    		model = queryList.get(0);    		//    		// 判断活动是否已经结束//    		if(MyStringUtil.isNotBlank(model.getEnd_time())) {//        		try {//					Date endDate = new SimpleDateFormat("yyyyMMddHHmm").parse(model.getEnd_time());//					if(endDate.getTime() < new Date().getTime()) {//						flag = false;//						// 活动时间已结束,移至历史//				    	model.setStatus("2");//				    	super.update(model);//				    	// 通知socket活动更新//				    	tSlotInfoService.updateSiDown(model.getDevice_did());//					}//				} catch (ParseException e) {//					flag = false;//				}//    		}    		    		queryMap.clear();    		queryMap.put("payact_pid", model.getId());    		queryMap.put("sysFlag", "1");    		model.setPrizeList(MarketPayActPrizeService.list(queryMap));    	}    	    	if(!flag) {    		model = new MarketPayActEntity();    		List<MarketPayActPrizeEntity> prizeList = Lists.newArrayList();    		prizeList.add(new MarketPayActPrizeEntity());    		prizeList.add(new MarketPayActPrizeEntity());    		prizeList.add(new MarketPayActPrizeEntity());    		prizeList.add(new MarketPayActPrizeEntity());    		prizeList.add(new MarketPayActPrizeEntity());    		prizeList.add(new MarketPayActPrizeEntity());    		model.setPrizeList(prizeList);    	}                return model;    }    @Override    public MarketPayActEntity getMarketPayAct(String id) {        if (MyStringUtil.isBlank(id)) {            throw new BusinessException("传入对象id不能为空");        }                MarketPayActEntity model = super.get(id);        if(null == model) {            throw new BusinessException("查询对象为空");        }        Map<String, Object> queryMap = Maps.newHashMap();		queryMap.put("payact_pid", model.getId());		queryMap.put("sysFlag", "1");		model.setPrizeList(MarketPayActPrizeService.list(queryMap));                return model;    }}