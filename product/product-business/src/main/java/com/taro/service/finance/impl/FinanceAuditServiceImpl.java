package com.taro.service.finance.impl;import java.util.Date;import java.util.List;import java.util.Map;import org.apache.commons.collections4.CollectionUtils;import org.apache.commons.lang3.StringUtils;import org.apache.commons.lang3.time.DateFormatUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.google.common.collect.Maps;import com.taro.constants.Constant;import com.taro.dao.finance.FinanceAuditDao;import com.taro.entity.finance.FinanceAuditEntity;import com.taro.entity.finance.FinanceEntity;import com.taro.exception.BusinessException;import com.taro.service.AbstractService;import com.taro.service.file.FileManageService;import com.taro.service.finance.FinanceAuditService;import com.taro.service.finance.FinanceService;import com.taro.utils.MyStringUtil;/** *<p>Title:FinanceAuditServiceImpl.java</p> *<p>Description:财务核销 ServiceImpl</p> *@author 张宇唯 *@version 1.0 *@Automatically generate by Coder in 2021-01-28 14:44:32 */@Servicepublic class FinanceAuditServiceImpl extends AbstractService<FinanceAuditEntity> implements FinanceAuditService {		@Autowired	private FinanceAuditDao financeAuditDao;	    @Override    protected FinanceAuditDao getDao() {        return financeAuditDao;    }	@Autowired	private FileManageService fileManageService;	@Autowired	private FinanceService financeService;	    @Override    public FinanceAuditEntity getFinanceAudit(String id) {        if (StringUtils.isBlank(id)) {            throw new BusinessException("传入对象id不能为空");        }        FinanceAuditEntity model = getDao().get(id);        if(null == model) {            throw new BusinessException("id查询为空");        }        Map<String, Object> queryMap = Maps.newHashMap();        queryMap.put("sysFlag", "1");        queryMap.put("tenants_pid", "1");        List<FinanceEntity> queryList = financeService.list(queryMap);        if(CollectionUtils.isEmpty(queryList)) {            throw new BusinessException("查询余额为空");        }        model.setNow_balance(queryList.get(0).getExpense());        return model;    }        @Override    public FinanceAuditEntity saveFinanceAudit (FinanceAuditEntity model) {    	if(null == model) {            throw new BusinessException("保存对象不能为空!");    	}else if(StringUtils.isBlank(model.getTenants_pid())){            throw new BusinessException("核销机构不能为空!");    	}else if(0 >= model.getNum()){            throw new BusinessException("核销金额不能小于0!");    	}    	if(StringUtils.isNotBlank(model.getFile())) {    		fileManageService.activation(model.getFile());    	}    	// 删除前端已删除的文件    	if(StringUtils.isNotBlank(model.getDeleteFileId())) {    		fileManageService.deleteFile(model.getDeleteFileId());    	}    	String tenants_pid = model.getTenants_pid();    	FinanceEntity saveModel = financeService.getByTenants(tenants_pid);    	if(null == saveModel) {            throw new BusinessException("查询余额为空");    	}    	Double balance = saveModel.getExpense();    	Double num = model.getNum();    	if(balance < num) {            throw new BusinessException("查询余额不足,无法核销");    	}    	saveModel.setExpense(balance - num);    	    	model.setFinance(saveModel.getId());    	model.setTime(DateFormatUtils.format(new Date(), Constant.DF_DATE_YYYYMMDD));    	if(StringUtils.isBlank(model.getId())) {    		super.save(model);    	}else {    		super.update(model);    	}    	    	financeService.update(saveModel);    	        return model;    }    @Override    public int deleteAll(String ids) {    	if (MyStringUtil.isNotBlank(ids)) {    		String[] idArr = ids.split(",");    		if (null != idArr && idArr.length > 0) {    			FinanceEntity finance = null;    			FinanceAuditEntity model = null;        		for (String id : idArr) {        			model = super.get(id);        			if (null != model && MyStringUtil.isNotBlank(model.getFinance())) {        				finance = financeService.get(model.getFinance());        				finance.setExpense(finance.getExpense() + model.getNum());        		    	financeService.update(finance);        			}        		}    		}    	}        return super.deleteAll(ids);    }    }