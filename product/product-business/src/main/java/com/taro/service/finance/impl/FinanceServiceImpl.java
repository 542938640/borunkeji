package com.taro.service.finance.impl;import java.util.Date;import org.apache.commons.lang3.StringUtils;import org.apache.commons.lang3.time.DateFormatUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.taro.constants.Constant;import com.taro.dao.finance.FinanceDao;import com.taro.entity.finance.FinanceAuditEntity;import com.taro.entity.finance.FinanceEntity;import com.taro.entity.finance.FinanceRechargeEntity;import com.taro.exception.BusinessException;import com.taro.service.AbstractService;import com.taro.service.finance.FinanceAuditService;import com.taro.service.finance.FinanceRechargeService;import com.taro.service.finance.FinanceService;import com.taro.utils.MyStringUtil;import com.taro.utils.UuidUtil;/** *<p>Title:FinanceServiceImpl.java</p> *<p>Description:财务管理 ServiceImpl</p> *@author 张宇唯 *@version 1.0 *@Automatically generate by Coder in 2021-01-28 14:44:11 */@Servicepublic class FinanceServiceImpl extends AbstractService<FinanceEntity> implements FinanceService {		@Autowired	private FinanceDao financeDao;	    @Override    protected FinanceDao getDao() {        return financeDao;    }	@Autowired	private FinanceRechargeService financeRechargeService;	@Autowired	private FinanceAuditService financeAuditService;    @Override    public FinanceEntity getByTenants(String id) {        if (id == null) {            throw new BusinessException("传入对象id不能为空");        }        FinanceEntity model = getDao().getByTenants(id);        if(null == model) {        	model = new FinanceEntity();        	model.setTenants_pid(id);        	model.setExpense(0D);        	model.setNote(0);        	model.setFlow(0D);        	model.setDays(0);        	model.setC1("0");        }        return model;    }        @Override    public FinanceEntity saveFinance(FinanceEntity model) {    	if(null == model) {            throw new BusinessException("保存对象不能为空!");    	}    	    	if(StringUtils.isBlank(model.getId())) {    		super.save(model);    	}else {    		super.update(model);    	}    	        return model;    }    @Override    public FinanceEntity saveFinanceRecharge(FinanceEntity model) {    	if(null == model) {            throw new BusinessException("保存对象不能为空!");    	}else if(StringUtils.isBlank(model.getTenants_pid())){            throw new BusinessException("充值机构不能为空!");    	}else if(StringUtils.isBlank(model.getType())){            throw new BusinessException("费用名称不能为空!");    	}else if(null == model.getExpense() || model.getExpense() <= 0){            throw new BusinessException("费用金额不能为空!");    	}    	String type = model.getType();    	if("2".equals(type)){    		if(null == model.getNote() || model.getNote() <= 0) {                throw new BusinessException("短信条数不能为空!");    		}else if(StringUtils.isBlank(model.getNote_time())) {                throw new BusinessException("短信有效时间不能为空!");    		}    	}else if("3".equals(type)){    		if(null == model.getFlow() || model.getFlow() <= 0) {                throw new BusinessException("流量数不能为空!");    		}else if(StringUtils.isBlank(model.getFlow_time())) {                throw new BusinessException("流量有效时间不能为空!");    		}    	}    	    	FinanceRechargeEntity financeRecharge = new FinanceRechargeEntity();    	financeRecharge.setTenants_pid(model.getTenants_pid());    	financeRecharge.setType(type);    	financeRecharge.setNum(model.getExpense());    	financeRecharge.setRecharge_time(DateFormatUtils.format(new Date(), Constant.DF_DATE_YYYYMMDD));    	financeRecharge.setC1("0");// 待确认    	    	if ("2".equals(type)) {    		financeRecharge.setEffective_time(model.getNote_time());    		financeRecharge.setC2(model.getNote().toString());    		financeRecharge.setRemark(model.getNote() + "条");    	} else if ("3".equals(type)) {    		financeRecharge.setEffective_time(model.getFlow_time());    		financeRecharge.setC2(model.getFlow().toString());    		financeRecharge.setRemark(model.getFlow() + "Mb");    	}    	    	if(StringUtils.isBlank(model.getId())) {    		financeRechargeService.save(financeRecharge);		}else {			financeRecharge.setId(model.getId());			financeRechargeService.update(financeRecharge);		}		//    	// 增加费用//    	Double expense = model.getExpense();//    	if(expense > 0) {//    		Double nowExpense = saveModel.getExpense() + expense;//    		saveModel.setExpense(nowExpense);//    		financeRechargeService.saveExpense(tenants_pid, finance_pid, model.getType(), expense, curTime);//    	}//    	//    	// 增加短信//    	Integer note = model.getNote();//    	if(note > 0) {//    		String note_time = model.getNote_time();//    		saveModel.setNote(saveModel.getNote() + note);//    		saveModel.setNote_time(note_time);//    		financeRechargeService.saveNote(tenants_pid, finance_pid, note, note_time, curTime);//    	}////    	// 增加流量//    	Double flow = model.getFlow();//    	if(flow > 0) {//    		String flow_time = model.getFlow_time();//    		saveModel.setFlow(saveModel.getFlow() + flow);//    		saveModel.setFlow_time(flow_time);//    		financeRechargeService.saveFlow(tenants_pid, finance_pid, flow, flow_time, curTime);//    	}    	//    	if(StringUtils.isBlank(saveModel.getId())) {//    		saveModel.setId(finance_pid);//    		super.save(saveModel);//    	}else {//    		super.update(saveModel);//    	}    	    	return model;    }    @Override    public FinanceEntity publish(String id) {        if (MyStringUtil.isBlank(id)) {            throw new BusinessException("传入对象id不能为空");        }        FinanceRechargeEntity model = financeRechargeService.get(id);        if(null == model) {            throw new BusinessException("查询对象为空");        }            	String curTime = DateFormatUtils.format(new Date(), Constant.DF_DATE_YYYYMMDD);    	String tenants_pid = model.getTenants_pid();    	String finance_pid = UuidUtil.get32UUID();    	FinanceEntity saveModel = getDao().getByTenants(tenants_pid);    	if(null == saveModel) {    		saveModel = new FinanceEntity();    		saveModel.setTenants_pid(tenants_pid);    		saveModel.setExpense(0D);    		saveModel.setNote(0);    		saveModel.setFlow(0D);    	}else {    		finance_pid = saveModel.getId();    	}    	        if ("1".equals(model.getType())) {        	Double expense = model.getNum();        	Double nowExpense = saveModel.getExpense() + expense;        	saveModel.setExpense(nowExpense);    		// 增加核销充值记录    		FinanceAuditEntity financeAudit = new FinanceAuditEntity();    		financeAudit.setTenants_pid(tenants_pid);    		financeAudit.setFinance(finance_pid);    		financeAudit.setType("2");// 充值    		financeAudit.setNum(-expense);    		financeAudit.setTime(curTime);    		financeAudit.setBalance(nowExpense);    		financeAuditService.save(financeAudit);        } else if ("2".equals(model.getType())) {        	saveModel.setNote(saveModel.getNote() + Integer.valueOf(model.getC2()));        } else if ("3".equals(model.getType())) {        	saveModel.setFlow(saveModel.getFlow() + Double.valueOf(model.getC2()));        }        model.setC1("1");// 已确认        model.setFinance(finance_pid);        financeRechargeService.update(model);    	    	if(StringUtils.isBlank(saveModel.getId())) {    		saveModel.setId(finance_pid);    		super.save(saveModel);    	}else {    		super.update(saveModel);    	}    	        return saveModel;    }}