package com.taro.service.pay.impl;import java.util.Date;import java.util.List;import java.util.Map;import org.apache.commons.lang3.StringUtils;import org.apache.commons.lang3.time.DateFormatUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.alibaba.fastjson.JSONObject;import com.github.pagehelper.PageHelper;import com.taro.annotation.WorkFlow;import com.taro.common.Page;import com.taro.constants.Constant;import com.taro.dao.pay.PayRefundDao;import com.taro.entity.ProcessDataEntity;import com.taro.entity.WorkFlowBean;import com.taro.entity.pay.PayRefundEntity;import com.taro.exception.BusinessException;import com.taro.service.AbstractService;import com.taro.service.file.FileManageService;import com.taro.service.pay.PayRefundService;import com.taro.utils.MyStringUtil;import com.taro.utils.SecurityMyUtils;/** *<p>Title:PayRefundServiceImpl.java</p> *<p>Description:退款申请 ServiceImpl</p> *@author 张宇唯 *@version 1.0 *@Automatically generate by Coder in 2021-01-27 14:34:57 */@Servicepublic class PayRefundServiceImpl extends AbstractService<PayRefundEntity> implements PayRefundService {		@Autowired	private PayRefundDao payRefundDao;	    @Override    protected PayRefundDao getDao() {        return payRefundDao;    }	@Autowired	private FileManageService fileManageService;    @Override    public Page<PayRefundEntity> listPayRefund(int pageNum, int pageSize, Map<String, Object> parameter) {        PageHelper.startPage(pageNum, pageSize, pageNum == 0 ? false : true);        List<PayRefundEntity> reuslt = getDao().listPayRefund(parameter);        return new Page<>(reuslt);    }        @Override    public PayRefundEntity savePayRefund(PayRefundEntity model) {    	if(null == model) {            throw new BusinessException("保存对象不能为空!");    	}    	    	if(StringUtils.isBlank(model.getId())) {    		super.save(model);    	}else {    		super.update(model);    	}    	        return model;    }    @WorkFlow(id = "id", isStartAndComplete = true)    @Override    public PayRefundEntity startAutoWorkFlow(PayRefundEntity model) {    	if(null == model) {            throw new BusinessException("保存对象不能为空!");    	}else if(MyStringUtil.isBlank(model.getTenants_pid())) {            throw new BusinessException("网点id不能为空!");    	}else if(MyStringUtil.isBlank(model.getUser_phone())) {            throw new BusinessException("用户手机号码不能为空!");    	}else if(MyStringUtil.isBlank(model.getUser_name())) {            throw new BusinessException("用户姓名不能为空!");    	}else if(MyStringUtil.isBlank(model.getPay_time())) {            throw new BusinessException("支付时间不能为空!");    	}    	    	// 激活图片    	if(StringUtils.isNotBlank(model.getPay_image())) {    		fileManageService.activation(model.getPay_image());    	}    	// 删除前端已删除的文件    	if(StringUtils.isNotBlank(model.getDeleteFileId())) {    		fileManageService.deleteFile(model.getDeleteFileId());    	}    	    	model.setCode("TK" + new Date().getTime());    	model.setStatus("0");// 未受理    	super.save(model);		// 启动流程		WorkFlowBean workFlowData = new WorkFlowBean();		workFlowData.setBusi_key(model.getId());		workFlowData.setFlow_key(Constant.PAY_REFUND_FLOW_KEY);		workFlowData.setIs_start(1);		workFlowData.setStart_user(SecurityMyUtils.getUserId());		JSONObject variables = new JSONObject();		variables.put("tenants_pid", model.getTenants_pid());		variables.put("idea", "1");		variables.put("idea_message", "");		variables.put("operation_user", SecurityMyUtils.getUserId());		variables.put("operation_time", DateFormatUtils.format(new Date(), Constant.DF_DATE_YYYYMMDDHHMMSS));		workFlowData.setVariables_json(variables.toJSONString());		model.setWorkFlowData(workFlowData);		        return model;    }        @WorkFlow(id="id")    @Override    public PayRefundEntity checkAutoWorkFlow(PayRefundEntity checkModel) {    	if(null == checkModel) {            throw new BusinessException("保存对象不能为空!");    	}else if(MyStringUtil.isBlank(checkModel.getId())) {            throw new BusinessException("业务id不能为空!");    	}else if(MyStringUtil.isBlank(checkModel.getIdea())) {            throw new BusinessException("审核结果不能为空!");    	}else if("0".equals(checkModel.getIdea()) && MyStringUtil.isBlank(checkModel.getIdea_message())) {            throw new BusinessException("退回时退回原因不能为空!");    	}    	String id = checkModel.getId();    	PayRefundEntity model = super.get(id);    	if(null == model) {            throw new BusinessException("业务id查询为空!");    	}else if(Constant.FLOW_STATE_END.equals(model.getFlow_state())) {            throw new BusinessException("业务流程已结束,不能进行审核!");    	}    	// 如果退回,则将记录还原为未受理状态    	if("0".equals(checkModel.getIdea())){        	model.setStatus("0");        	super.update(model);    	}		// 审核流程		WorkFlowBean workFlowData = new WorkFlowBean();		workFlowData.setBusi_key(id);		workFlowData.setFlow_key(Constant.PAY_REFUND_FLOW_KEY);		JSONObject variables = new JSONObject();		variables.put("tenants_pid", model.getTenants_pid());		variables.put("idea", checkModel.getIdea());		variables.put("idea_message", checkModel.getIdea_message());		variables.put("operation_user", SecurityMyUtils.getUserId());		variables.put("operation_time", DateFormatUtils.format(new Date(), Constant.DF_DATE_YYYYMMDDHHMMSS));		workFlowData.setVariables_json(variables.toJSONString());		model.setWorkFlowData(workFlowData);    	    	return model;    }        // 工作流回调方法    @Override    public void workFlowCallback(ProcessDataEntity processData){    	if(null != processData) {    		PayRefundEntity model = super.get(processData.getBusi_key());    		if(null != model) {    			if(StringUtils.isBlank(model.getC2())) {    				model.setC2(processData.getOperation_user());    			}            	model.setFlow_check_result(processData.getIdea());            	model.setFlow_check_opinion(processData.getIdea_message());            	model.setFlow_check_user(processData.getOperation_user());            	model.setFlow_check_time(processData.getOperation_time());            	model.setFlow_state(processData.getFlow_state());            	model.setFlow_task_id(processData.getTask_id());            	model.setFlow_task_def(processData.getTask_def());            	model.setFlow_task_name(processData.getTask_name());            	super.update(model);    		}    	}    }        @Override    public PayRefundEntity saveStatus(PayRefundEntity model) {    	if(null == model) {            throw new BusinessException("保存对象不能为空!");    	}else if(MyStringUtil.isBlank(model.getId())) {            throw new BusinessException("退款申请id不能为空!");    	}else if(MyStringUtil.isBlank(model.getStatus())) {            throw new BusinessException("受理状态不能为空!");    	}    	PayRefundEntity saveModel = super.get(model.getId());    	if(null == saveModel || "0".equals(saveModel.getSysFlag())) {            throw new BusinessException("退款申请id查询为空!");    	}    	saveModel.setStatus(model.getStatus());    	super.update(saveModel);    	    	return saveModel;    }    }