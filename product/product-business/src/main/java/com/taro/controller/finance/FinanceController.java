package com.taro.controller.finance;import java.util.Set;import javax.servlet.http.HttpServletRequest;import javax.validation.ConstraintViolation;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RestController;import com.taro.common.DataSetObject;import com.taro.constants.Constant;import com.taro.controller.AbstractController;import com.taro.entity.finance.FinanceEntity;import com.taro.exception.BusinessException;import com.taro.service.finance.FinanceService;import io.swagger.annotations.Api;import io.swagger.annotations.ApiImplicitParam;import io.swagger.annotations.ApiImplicitParams;import io.swagger.annotations.ApiOperation;/** *<p>Title:FinanceController.java</p> *<p>Description:财务管理 Action</p> *@author 张宇唯 *@version 1.0 *@Automatically generate by Coder in 2021-01-28 14:44:11 */@Api(tags = "财务管理")@RestController@RequestMapping(value="/finance")public class FinanceController extends AbstractController<FinanceEntity> {	public final static String MODULE = "财务管理";	public final static String ENTITY = "FinanceEntity";		@Autowired	private FinanceService financeService;		@Override    protected FinanceService getService () {        return financeService;    }    	@Override    public String getModule() {		return MODULE;	}	@ApiOperation(value = "根据id获取详情", notes = "根据id获取详情")	@ApiImplicitParams({		@ApiImplicitParam (name = "id", value = "实例id", required = true, dataType = "String", paramType = "query")	})	@RequestMapping(value = "/getByTenants/{id}", produces = Constant.JSON_UTF_8,method = RequestMethod.GET)	public String getByTenants(@PathVariable("id") String id) {		getBefore(id);				FinanceEntity model=getService().getByTenants(id);		return new DataSetObject<FinanceEntity>(model).toJson(ignoreAttr.get(Constant.IGNORE_ATTR_GET));	}		@ApiOperation(value = "保存" + MODULE, notes = "保存" + MODULE)	@ApiImplicitParams({		@ApiImplicitParam (name = "model", value = "保存实体", required = true, dataType = ENTITY, paramType = "query")	})	@RequestMapping(value = "/saveFinance",consumes = Constant.JSON_UTF_8,method = RequestMethod.POST)	public String saveFinance(@RequestBody FinanceEntity model) {				Set<ConstraintViolation<FinanceEntity>> constraintViolations = validator.validate(model);		if (!constraintViolations.isEmpty()) {			throw new BusinessException(constraintViolations.iterator().next().getMessage());		}		createBefore(model);		getService().saveFinance(model);		return new DataSetObject<FinanceEntity>(model).toJson(ignoreAttr.get(Constant.IGNORE_ATTR_CREATE));	}	@ApiOperation(value = "保存" + MODULE, notes = "保存" + MODULE)	@ApiImplicitParams({		@ApiImplicitParam (name = "model", value = "保存实体", required = true, dataType = ENTITY, paramType = "query")	})	@RequestMapping(value = "/saveFinanceRecharge",consumes = Constant.JSON_UTF_8,method = RequestMethod.POST)	public String saveFinanceRecharge(HttpServletRequest request, @RequestBody FinanceEntity model) {				Set<ConstraintViolation<FinanceEntity>> constraintViolations = validator.validate(model);		if (!constraintViolations.isEmpty()) {			throw new BusinessException(constraintViolations.iterator().next().getMessage());		}		createBefore(model);		getService().saveFinanceRecharge(model);		return new DataSetObject<FinanceEntity>(model).toJson(ignoreAttr.get(Constant.IGNORE_ATTR_CREATE));	}	@ApiOperation(value = "确认", notes = "确认")	@ApiImplicitParams({		@ApiImplicitParam (name = "id", value = "实例id", required = true, dataType = "String", paramType = "query")	})	@RequestMapping(value = "/publish/{id}", produces = Constant.JSON_UTF_8,method = RequestMethod.GET)	public String publish(@PathVariable("id") String id) {		getBefore(id);				FinanceEntity model=getService().publish(id);		return new DataSetObject<FinanceEntity>(model).toJson(ignoreAttr.get(Constant.IGNORE_ATTR_GET));	}}