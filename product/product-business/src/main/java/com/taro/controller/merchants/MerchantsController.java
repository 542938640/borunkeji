package com.taro.controller.merchants;import java.util.Map;import java.util.Set;import javax.servlet.http.HttpServletRequest;import javax.validation.ConstraintViolation;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import com.taro.common.DataSetObject;import com.taro.common.Message;import com.taro.common.Page;import com.taro.constants.Constant;import com.taro.controller.AbstractController;import com.taro.entity.merchants.MerchantsCheckEntity;import com.taro.entity.merchants.MerchantsEntity;import com.taro.entity.merchants.MerchantsStoreEntity;import com.taro.exception.BusinessException;import com.taro.service.merchants.MerchantsService;import io.swagger.annotations.Api;import io.swagger.annotations.ApiImplicitParam;import io.swagger.annotations.ApiImplicitParams;import io.swagger.annotations.ApiOperation;/** *<p>Title:MerchantsController.java</p> *<p>Description:商户 Action</p> *@author 张宇唯 *@version 1.0 *@Automatically generate by Coder in 2020-12-18 14:17:41 */@Api(tags = "商户")@RestController@RequestMapping(value="/merchants")public class MerchantsController extends AbstractController<MerchantsEntity> {	public final static String MODULE = "商户";	public final static String ENTITY = "MerchantsEntity";		@Autowired	private MerchantsService merchantsService;		@Override    protected MerchantsService getService () {        return merchantsService;    }    	@Override    public String getModule() {		return MODULE;	}	@ApiOperation(value = "获取列表数据", notes = "获取列表数据")	@ApiImplicitParams({		@ApiImplicitParam (name = "page", value = "分页参数(页数)", required = false, dataType = "Integer", paramType = "query"),		@ApiImplicitParam (name = "rows", value = "分页参数(每页个条数)", required = false, dataType = "Integer", paramType = "query"),		@ApiImplicitParam (name = "parameter", value = "查询条件参数", required = true, dataType = "Map<String, Object>", paramType = "query")	})	@RequestMapping(value = "/listStore",produces = Constant.JSON_UTF_8,method = RequestMethod.GET)	public String listStore(HttpServletRequest request,			@RequestParam(value = Constant.PAGE_NUM, defaultValue = Constant.PAGE_DEFAULT_VALUE) int pageNum,			@RequestParam(value = Constant.PAGE_SIZE, defaultValue = Constant.PAGE_SIZE_DEFAULT_VALUE) int pageSize,			@RequestParam Map<String, Object> parameter){		listBefore(parameter);		Page<MerchantsEntity> result = getService().listStore(pageNum,pageSize,parameter);		return result.toJson(ignoreAttr.get(Constant.IGNORE_ATTR_LIST));	}		@ApiOperation(value = "保存" + MODULE, notes = "保存" + MODULE)	@ApiImplicitParams({		@ApiImplicitParam (name = "model", value = "保存实体", required = true, dataType = ENTITY, paramType = "query")	})	@RequestMapping(value = "/saveMerchants",produces = Constant.JSON_UTF_8,consumes = Constant.JSON_UTF_8,method = RequestMethod.POST)	public String saveMerchants(HttpServletRequest request, @RequestBody MerchantsEntity model) {				Set<ConstraintViolation<MerchantsEntity>> constraintViolations = validator.validate(model);		if (!constraintViolations.isEmpty()) {			throw new BusinessException(constraintViolations.iterator().next().getMessage());		}		createBefore(model);		getService().saveMerchants(model);		return new DataSetObject<MerchantsEntity>(model).toJson(ignoreAttr.get(Constant.IGNORE_ATTR_CREATE));	}		@ApiOperation(value = "保存门店信息", notes = "保存门店信息")	@ApiImplicitParams({		@ApiImplicitParam (name = "model", value = "保存实体", required = true, dataType = ENTITY, paramType = "query")	})	@RequestMapping(value = "/saveMerchantsStore",produces = Constant.JSON_UTF_8,consumes = Constant.JSON_UTF_8,method = RequestMethod.POST)	public String saveMerchantsStore(@RequestBody MerchantsStoreEntity model) {		MerchantsEntity merchants = getService().startAutoWorkFlow(model);		return new DataSetObject<MerchantsEntity>(merchants).toJson(ignoreAttr.get(Constant.IGNORE_ATTR_CREATE));	}		@ApiOperation(value = "审核", notes = "审核")	@ApiImplicitParams({		@ApiImplicitParam (name = "model", value = "保存实体", required = true, dataType = ENTITY, paramType = "query")	})	@RequestMapping(value = "/check",produces = Constant.JSON_UTF_8,consumes = Constant.JSON_UTF_8,method = RequestMethod.POST)	public String check(HttpServletRequest request, @RequestBody MerchantsCheckEntity model) {		getService().checkAutoWorkFlow(model);		return new Message(Constant.STATUS_OK, "提交成功").toJson();	}		@ApiOperation(value = "保存门店信息", notes = "保存门店信息")	@ApiImplicitParams({		@ApiImplicitParam (name = "model", value = "保存实体", required = true, dataType = ENTITY, paramType = "query")	})	@RequestMapping(value = "/saveAct",produces = Constant.JSON_UTF_8,consumes = Constant.JSON_UTF_8,method = RequestMethod.POST)	public String saveAct(@RequestBody MerchantsCheckEntity model) {		MerchantsEntity merchants = getService().actAutoWorkFlow();		return new DataSetObject<MerchantsEntity>(merchants).toJson(ignoreAttr.get(Constant.IGNORE_ATTR_CREATE));	}	@ApiOperation(value = "根据id获取商户门店详情", notes = "根据id获取商户门店详情")	@ApiImplicitParams({		@ApiImplicitParam (name = "id", value = "实例id", required = true, dataType = "String", paramType = "query")	})	@RequestMapping(value = "/getStore/{id}", produces = Constant.JSON_UTF_8,method = RequestMethod.GET)	public String getStore(@PathVariable("id") String id) {		getBefore(id);				MerchantsEntity model=getService().getStore(id);		return new DataSetObject<MerchantsEntity>(model).toJson(ignoreAttr.get(Constant.IGNORE_ATTR_GET));	}	}