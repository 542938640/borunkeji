package com.taro.controller.help;import java.util.Map;import java.util.Set;import javax.servlet.http.HttpServletRequest;import javax.validation.ConstraintViolation;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import com.taro.common.DataSetObject;import com.taro.common.Page;import com.taro.constants.Constant;import com.taro.controller.AbstractController;import com.taro.entity.help.HelpCenterEntity;import com.taro.exception.BusinessException;import com.taro.service.help.HelpCenterService;import io.swagger.annotations.Api;import io.swagger.annotations.ApiImplicitParam;import io.swagger.annotations.ApiImplicitParams;import io.swagger.annotations.ApiOperation;/** *<p>Title:HelpCenterController.java</p> *<p>Description:帮助中心 Action</p> *@author 张宇唯 *@version 1.0 *@Automatically generate by Coder in 2020-12-11 17:24:11 */@Api(tags = "帮助中心")@RestController@RequestMapping(value="/helpCenter")public class HelpCenterController extends AbstractController<HelpCenterEntity> {	public final static String MODULE = "帮助中心";	public final static String ENTITY = "HelpCenterEntity";		@Autowired	private HelpCenterService helpCenterService;		@Override    protected HelpCenterService getService () {        return helpCenterService;    }    	@Override    public String getModule() {		return MODULE;	}	@ApiOperation(value = "获取列表数据", notes = "获取列表数据")	@ApiImplicitParams({		@ApiImplicitParam (name = "page", value = "分页参数(页数)", required = false, dataType = "Integer", paramType = "query"),		@ApiImplicitParam (name = "rows", value = "分页参数(每页个条数)", required = false, dataType = "Integer", paramType = "query"),		@ApiImplicitParam (name = "parameter", value = "查询条件参数", required = true, dataType = "Map<String, Object>", paramType = "query")	})	@RequestMapping(value = "/listHelpCenter",produces = Constant.JSON_UTF_8,method = RequestMethod.GET)	public String listHelpCenter(HttpServletRequest request, 			@RequestParam(value = Constant.PAGE_NUM, defaultValue = Constant.PAGE_DEFAULT_VALUE) int pageNum,			@RequestParam(value = Constant.PAGE_SIZE, defaultValue = Constant.PAGE_SIZE_DEFAULT_VALUE) int pageSize,			@RequestParam Map<String, Object> parameter){		listBefore(parameter);		Page<HelpCenterEntity> result=getService().listHelpCenter(pageNum,pageSize,parameter);		return result.toJson(ignoreAttr.get(Constant.IGNORE_ATTR_LIST));	}		@ApiOperation(value = "保存" + MODULE, notes = "保存" + MODULE)	@ApiImplicitParams({		@ApiImplicitParam (name = "model", value = "保存实体", required = true, dataType = ENTITY, paramType = "query")	})	@RequestMapping(value = "/saveHelpCenter",consumes = Constant.JSON_UTF_8,method = RequestMethod.POST)	public String saveHelpCenter(HttpServletRequest request, @RequestBody HelpCenterEntity model) {				Set<ConstraintViolation<HelpCenterEntity>> constraintViolations = validator.validate(model);		if (!constraintViolations.isEmpty()) {			throw new BusinessException(constraintViolations.iterator().next().getMessage());		}		createBefore(model);		getService().saveHelpCenter(model);		return new DataSetObject<HelpCenterEntity>(model).toJson(ignoreAttr.get(Constant.IGNORE_ATTR_CREATE));	}	}