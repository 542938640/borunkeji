package com.taro.controller.device;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import io.swagger.annotations.Api;import io.swagger.annotations.ApiImplicitParam;import io.swagger.annotations.ApiImplicitParams;import io.swagger.annotations.ApiOperation;import javax.validation.ConstraintViolation;import com.taro.common.DataSetObject;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMethod;import com.taro.exception.BusinessException;import com.taro.constants.Constant;import java.util.Set;import com.taro.controller.AbstractController;import com.taro.entity.device.DeviceFuncEntity;import com.taro.service.device.DeviceFuncService;/** *<p>Title:DeviceFuncController.java</p> *<p>Description: Action</p> *@author 张宇唯 *@version 1.0 *@Automatically generate by Coder in 2020-11-16 11:26:19 */@Api(tags = "")@RestController@RequestMapping(value="/app/deviceFunc")public class DeviceFuncController extends AbstractController<DeviceFuncEntity> {	public final static String MODULE = "";	public final static String ENTITY = "DeviceFuncEntity";		@Autowired	private DeviceFuncService deviceFuncService;		@Override    protected DeviceFuncService getService () {        return deviceFuncService;    }    	@Override    public String getModule() {		return MODULE;	}		@ApiOperation(value = "保存" + MODULE, notes = "保存" + MODULE)	@ApiImplicitParams({		@ApiImplicitParam (name = "model", value = "保存实体", required = true, dataType = ENTITY, paramType = "query")	})	@RequestMapping(value = "/saveDeviceFunc",consumes = Constant.JSON_UTF_8,method = RequestMethod.POST)	public String saveDeviceFunc(@RequestBody DeviceFuncEntity model) {				Set<ConstraintViolation<DeviceFuncEntity>> constraintViolations = validator.validate(model);		if (!constraintViolations.isEmpty()) {			throw new BusinessException(constraintViolations.iterator().next().getMessage());		}		createBefore(model);		getService().saveDeviceFunc(model);		return new DataSetObject<DeviceFuncEntity>(model).toJson(ignoreAttr.get(Constant.IGNORE_ATTR_CREATE));	}	@ApiOperation(value = "根据id获取详情", notes = "根据id获取详情")	@ApiImplicitParams({		@ApiImplicitParam (name = "id", value = "实例id", required = true, dataType = "String", paramType = "query")	})	@RequestMapping(value = "/getByDevice/{id}/{type}", produces = Constant.JSON_UTF_8,method = RequestMethod.GET)	public String getByDevice(@PathVariable("id") String id, @PathVariable("type") String type) {		DeviceFuncEntity model=getService().getByDevice(id, type);		return new DataSetObject<DeviceFuncEntity>(model).toJson(ignoreAttr.get(Constant.IGNORE_ATTR_GET));	}}