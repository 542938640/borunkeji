package com.taro.controller.merchants;import java.util.List;import java.util.Map;import java.util.Set;import javax.servlet.http.HttpServletRequest;import javax.validation.ConstraintViolation;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import com.taro.common.DataSet;import com.taro.common.DataSetObject;import com.taro.common.Message;import com.taro.common.Page;import com.taro.constants.Constant;import com.taro.controller.AbstractController;import com.taro.entity.merchants.MerchantsCheckEntity;import com.taro.entity.merchants.MerchantsCouponEntity;import com.taro.entity.merchants.MerchantsCouponReqEntity;import com.taro.exception.BusinessException;import com.taro.service.merchants.MerchantsCouponService;import io.swagger.annotations.Api;import io.swagger.annotations.ApiImplicitParam;import io.swagger.annotations.ApiImplicitParams;import io.swagger.annotations.ApiOperation;/** *<p>Title:MerchantsCouponController.java</p> *<p>Description:商户优惠券 Action</p> *@author 张宇唯 *@version 1.0 *@Automatically generate by Coder in 2020-12-17 19:21:30 */@Api(tags = "商户优惠券")@RestController@RequestMapping(value="/merchantsCoupon")public class MerchantsCouponController extends AbstractController<MerchantsCouponEntity> {	public final static String MODULE = "商户优惠券";	public final static String ENTITY = "MerchantsCouponEntity";		@Autowired	private MerchantsCouponService merchantsCouponService;		@Override    protected MerchantsCouponService getService () {        return merchantsCouponService;    }    	@Override    public String getModule() {		return MODULE;	}		@ApiOperation(value = "获取所有分类优惠券信息", notes = "获取所有分类优惠券信息")	@ApiImplicitParams({		@ApiImplicitParam (name = "parameter", value = "查询条件参数", required = true, dataType = "Map<String, Object>", paramType = "query")	})	@RequestMapping(value = "/listCouponByTrade",produces = Constant.JSON_UTF_8,method = RequestMethod.GET)	public String listCouponByTrade(@RequestParam Map<String, Object> parameter){		listBefore(parameter);		List<MerchantsCouponEntity> result = getService().listCouponByTrade(parameter);		return new DataSet<MerchantsCouponEntity>(result).toJson();	}	@ApiOperation(value = "获取所有优惠券信息", notes = "获取所有优惠券信息")	@ApiImplicitParams({		@ApiImplicitParam (name = "parameter", value = "查询条件参数", required = true, dataType = "Map<String, Object>", paramType = "query")	})	@RequestMapping(value = "/listNotPage",produces = Constant.JSON_UTF_8,method = RequestMethod.GET)	public String listNotPage(@RequestParam Map<String, Object> parameter){		listBefore(parameter);		List<MerchantsCouponEntity> result = getService().list(parameter);		return new DataSet<MerchantsCouponEntity>(result).toJson();	}		@ApiOperation(value = "获取列表数据", notes = "获取列表数据")	@ApiImplicitParams({		@ApiImplicitParam (name = "page", value = "分页参数(页数)", required = false, dataType = "Integer", paramType = "query"),		@ApiImplicitParam (name = "rows", value = "分页参数(每页个条数)", required = false, dataType = "Integer", paramType = "query"),		@ApiImplicitParam (name = "parameter", value = "查询条件参数", required = true, dataType = "Map<String, Object>", paramType = "query")	})	@RequestMapping(value = "/listCoupon",produces = Constant.JSON_UTF_8,method = RequestMethod.GET)	public String listCoupon(HttpServletRequest request,			@RequestParam(value = Constant.PAGE_NUM, defaultValue = Constant.PAGE_DEFAULT_VALUE) int pageNum,			@RequestParam(value = Constant.PAGE_SIZE, defaultValue = Constant.PAGE_SIZE_DEFAULT_VALUE) int pageSize,			@RequestParam Map<String, Object> parameter){		listBefore(parameter);		Page<MerchantsCouponEntity> result = getService().listCoupon(pageNum,pageSize,parameter);		return result.toJson(ignoreAttr.get(Constant.IGNORE_ATTR_LIST));	}		@ApiOperation(value = "保存" + MODULE, notes = "保存" + MODULE)	@ApiImplicitParams({		@ApiImplicitParam (name = "model", value = "保存实体", required = true, dataType = ENTITY, paramType = "query")	})	@RequestMapping(value = "/saveMerchantsCoupon",produces = Constant.JSON_UTF_8,consumes = Constant.JSON_UTF_8,method = RequestMethod.POST)	public String saveMerchantsCoupon(@RequestBody MerchantsCouponEntity model) {				Set<ConstraintViolation<MerchantsCouponEntity>> constraintViolations = validator.validate(model);		if (!constraintViolations.isEmpty()) {			throw new BusinessException(constraintViolations.iterator().next().getMessage());		}		createBefore(model);		getService().saveMerchantsCoupon(model);		return new DataSetObject<MerchantsCouponEntity>(model).toJson(ignoreAttr.get(Constant.IGNORE_ATTR_CREATE));	}		@ApiOperation(value = "提交修改", notes = "提交修改")	@ApiImplicitParams({		@ApiImplicitParam (name = "model", value = "保存实体", required = true, dataType = ENTITY, paramType = "query")	})	@RequestMapping(value = "/submitSave",produces = Constant.JSON_UTF_8,consumes = Constant.JSON_UTF_8,method = RequestMethod.POST)	public String submitSave(@RequestBody MerchantsCouponEntity model) {		getService().startAutoWorkFlow(model);		return new DataSetObject<MerchantsCouponEntity>(model).toJson(ignoreAttr.get(Constant.IGNORE_ATTR_CREATE));	}		@ApiOperation(value = "审核", notes = "审核")	@ApiImplicitParams({		@ApiImplicitParam (name = "model", value = "保存实体", required = true, dataType = ENTITY, paramType = "query")	})	@RequestMapping(value = "/check",produces = Constant.JSON_UTF_8,consumes = Constant.JSON_UTF_8,method = RequestMethod.POST)	public String check(@RequestBody MerchantsCheckEntity model) {		getService().checkAutoWorkFlow(model);		return new Message(Constant.STATUS_OK, "提交成功").toJson();	}	@ApiOperation(value = "保存优惠券发放数量", notes = "保存优惠券发放数量")	@ApiImplicitParams({		@ApiImplicitParam (name = "model", value = "保存实体", required = true, dataType = ENTITY, paramType = "query")	})	@RequestMapping(value = "/saveFrantNum",produces = Constant.JSON_UTF_8,consumes = Constant.JSON_UTF_8,method = RequestMethod.POST)	public String saveFrantNum(@RequestBody MerchantsCouponEntity model) {		getService().saveFrantNum(model);		return new DataSetObject<MerchantsCouponEntity>(model).toJson(ignoreAttr.get(Constant.IGNORE_ATTR_CREATE));	}	@ApiOperation(value = "保存优惠券状态", notes = "保存优惠券状态")	@ApiImplicitParams({		@ApiImplicitParam (name = "model", value = "保存实体", required = true, dataType = ENTITY, paramType = "query")	})	@RequestMapping(value = "/saveStatus",produces = Constant.JSON_UTF_8,consumes = Constant.JSON_UTF_8,method = RequestMethod.POST)	public String saveStatus(@RequestBody MerchantsCouponEntity model) {		getService().saveStatus(model);		return new DataSetObject<MerchantsCouponEntity>(model).toJson(ignoreAttr.get(Constant.IGNORE_ATTR_CREATE));	}	@ApiOperation(value = "保存优惠券启用状态", notes = "保存优惠券启用状态")	@ApiImplicitParams({		@ApiImplicitParam (name = "model", value = "保存实体", required = true, dataType = ENTITY, paramType = "query")	})	@RequestMapping(value = "/saveEnable",produces = Constant.JSON_UTF_8,consumes = Constant.JSON_UTF_8,method = RequestMethod.POST)	public String saveEnable(@RequestBody MerchantsCouponEntity model) {		getService().saveEnable(model);		return new DataSetObject<MerchantsCouponEntity>(model).toJson(ignoreAttr.get(Constant.IGNORE_ATTR_CREATE));	}	@ApiOperation(value = "保存优惠券共享状态", notes = "保存优惠券共享状态")	@ApiImplicitParams({		@ApiImplicitParam (name = "model", value = "保存实体", required = true, dataType = ENTITY, paramType = "query")	})	@RequestMapping(value = "/saveIsShare",produces = Constant.JSON_UTF_8,consumes = Constant.JSON_UTF_8,method = RequestMethod.POST)	public String saveIsShare(@RequestBody MerchantsCouponEntity model) {		getService().saveIsShare(model);		return new DataSetObject<MerchantsCouponEntity>(model).toJson(ignoreAttr.get(Constant.IGNORE_ATTR_CREATE));	}		@ApiOperation(value = "保存门店信息", notes = "保存门店信息")	@ApiImplicitParams({		@ApiImplicitParam (name = "model", value = "保存实体", required = true, dataType = ENTITY, paramType = "query")	})	@RequestMapping(value = "/saveAct",produces = Constant.JSON_UTF_8,consumes = Constant.JSON_UTF_8,method = RequestMethod.POST)	public String saveAct(@RequestBody MerchantsCheckEntity model) {		MerchantsCouponEntity merchants = getService().actAutoWorkFlow();		return new DataSetObject<MerchantsCouponEntity>(merchants).toJson(ignoreAttr.get(Constant.IGNORE_ATTR_CREATE));	}	@ApiOperation(value = "核销优惠券", notes = "核销优惠券")	@ApiImplicitParams({		@ApiImplicitParam (name = "model", value = "保存实体", required = true, dataType = ENTITY, paramType = "query")	})	@RequestMapping(value = "/saveLogout",produces = Constant.JSON_UTF_8,consumes = Constant.JSON_UTF_8,method = RequestMethod.POST)	public String saveLogout(@RequestBody MerchantsCouponReqEntity model) {		model = getService().saveLogout(model);		return new DataSetObject<MerchantsCouponReqEntity>(model).toJson(ignoreAttr.get(Constant.IGNORE_ATTR_CREATE));	}	@ApiOperation(value = "获取优惠券本地数据", notes = "获取优惠券本地数据")	@ApiImplicitParams({		@ApiImplicitParam (name = "page", value = "分页参数(页数)", required = false, dataType = "Integer", paramType = "query"),		@ApiImplicitParam (name = "rows", value = "分页参数(每页个条数)", required = false, dataType = "Integer", paramType = "query"),		@ApiImplicitParam (name = "parameter", value = "查询条件参数", required = true, dataType = "Map<String, Object>", paramType = "query")	})	@RequestMapping(value = "/listLocalCoupon",produces = Constant.JSON_UTF_8,method = RequestMethod.GET)	public String listLocalCoupon(@RequestParam(value = Constant.PAGE_NUM, defaultValue = Constant.PAGE_DEFAULT_VALUE) int pageNum,			@RequestParam(value = Constant.PAGE_SIZE, defaultValue = Constant.PAGE_SIZE_DEFAULT_VALUE) int pageSize,			@RequestParam Map<String, Object> parameter){		listBefore(parameter);		Page<MerchantsCouponEntity> result=getService().listLocalCoupon(pageNum,pageSize,parameter);		return result.toJson(ignoreAttr.get(Constant.IGNORE_ATTR_LIST));	}	@ApiOperation(value = "获取优惠券共享数据", notes = "获取优惠券共享数据")	@ApiImplicitParams({		@ApiImplicitParam (name = "page", value = "分页参数(页数)", required = false, dataType = "Integer", paramType = "query"),		@ApiImplicitParam (name = "rows", value = "分页参数(每页个条数)", required = false, dataType = "Integer", paramType = "query"),		@ApiImplicitParam (name = "parameter", value = "查询条件参数", required = true, dataType = "Map<String, Object>", paramType = "query")	})	@RequestMapping(value = "/listShareCoupon",produces = Constant.JSON_UTF_8,method = RequestMethod.GET)	public String listShareCoupon(@RequestParam(value = Constant.PAGE_NUM, defaultValue = Constant.PAGE_DEFAULT_VALUE) int pageNum,			@RequestParam(value = Constant.PAGE_SIZE, defaultValue = Constant.PAGE_SIZE_DEFAULT_VALUE) int pageSize,			@RequestParam Map<String, Object> parameter){		listBefore(parameter);		Page<MerchantsCouponEntity> result=getService().listShareCoupon(pageNum,pageSize,parameter);		return result.toJson(ignoreAttr.get(Constant.IGNORE_ATTR_LIST));	}	@ApiOperation(value = "保存优惠券共享关系", notes = "保存优惠券共享关系")	@ApiImplicitParams({		@ApiImplicitParam (name = "model", value = "保存实体", required = true, dataType = ENTITY, paramType = "query")	})	@RequestMapping(value = "/saveShare",produces = Constant.JSON_UTF_8,consumes = Constant.JSON_UTF_8,method = RequestMethod.POST)	public String saveShare(@RequestBody MerchantsCouponEntity model) {		model = getService().saveShare(model);		return new DataSetObject<MerchantsCouponEntity>(model).toJson(ignoreAttr.get(Constant.IGNORE_ATTR_CREATE));	}	}