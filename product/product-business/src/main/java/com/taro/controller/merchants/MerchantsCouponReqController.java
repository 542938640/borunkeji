package com.taro.controller.merchants;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import io.swagger.annotations.Api;import io.swagger.annotations.ApiImplicitParam;import io.swagger.annotations.ApiImplicitParams;import io.swagger.annotations.ApiOperation;import javax.validation.ConstraintViolation;import com.taro.common.DataSetObject;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMethod;import com.taro.exception.BusinessException;import com.taro.constants.Constant;import java.util.Set;import com.taro.controller.AbstractController;import com.taro.entity.merchants.MerchantsCouponReqEntity;import com.taro.service.merchants.MerchantsCouponReqService;/** *<p>Title:MerchantsCouponReqController.java</p> *<p>Description:商户优惠券领取 Action</p> *@author 张宇唯 *@version 1.0 *@Automatically generate by Coder in 2020-12-17 19:21:48 */@Api(tags = "商户优惠券领取")@RestController@RequestMapping(value="/merchantsCouponReq")public class MerchantsCouponReqController extends AbstractController<MerchantsCouponReqEntity> {	public final static String MODULE = "商户优惠券领取";	public final static String ENTITY = "MerchantsCouponReqEntity";		@Autowired	private MerchantsCouponReqService merchantsCouponReqService;		@Override    protected MerchantsCouponReqService getService () {        return merchantsCouponReqService;    }    	@Override    public String getModule() {		return MODULE;	}		@ApiOperation(value = "保存" + MODULE, notes = "保存" + MODULE)	@ApiImplicitParams({		@ApiImplicitParam (name = "model", value = "保存实体", required = true, dataType = ENTITY, paramType = "query")	})	@RequestMapping(value = "/saveMerchantsCouponReq",consumes = Constant.JSON_UTF_8,method = RequestMethod.POST)	public String saveMerchantsCouponReq(@RequestBody MerchantsCouponReqEntity model) {				Set<ConstraintViolation<MerchantsCouponReqEntity>> constraintViolations = validator.validate(model);		if (!constraintViolations.isEmpty()) {			throw new BusinessException(constraintViolations.iterator().next().getMessage());		}		createBefore(model);		getService().saveMerchantsCouponReq(model);		return new DataSetObject<MerchantsCouponReqEntity>(model).toJson(ignoreAttr.get(Constant.IGNORE_ATTR_CREATE));	}	}