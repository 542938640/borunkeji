package com.taro.service.activiti.impl;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletResponse;import org.activiti.bpmn.model.BpmnModel;import org.activiti.engine.HistoryService;import org.activiti.engine.ProcessEngine;import org.activiti.engine.ProcessEngineConfiguration;import org.activiti.engine.RepositoryService;import org.activiti.engine.RuntimeService;import org.activiti.engine.TaskService;import org.activiti.engine.history.HistoricActivityInstance;import org.activiti.engine.history.HistoricProcessInstance;import org.activiti.engine.history.HistoricTaskInstance;import org.activiti.engine.history.HistoricVariableInstance;import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;import org.activiti.engine.impl.context.Context;import org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity;import org.activiti.engine.runtime.ProcessInstance;import org.activiti.engine.task.Comment;import org.activiti.engine.task.Task;import org.activiti.image.ProcessDiagramGenerator;import org.apache.commons.collections.CollectionUtils;import org.apache.commons.lang3.StringUtils;import org.apache.commons.lang3.time.DateFormatUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;import com.github.pagehelper.PageHelper;import com.taro.activiti.ActivitiUtil;import com.taro.common.DataSet;import com.taro.common.Page;import com.taro.constants.Constant;import com.taro.entity.CglibBean;import com.taro.entity.ProcessDataEntity;import com.taro.entity.activiti.ProcessEntity;import com.taro.entity.activiti.ProcessTaskEntity;import com.taro.entity.activiti.ProcessVariableEntity;import com.taro.entity.sec.SecUserEntity;//import com.taro.entity.sec.UserInfoEntity;import com.taro.exception.BusinessException;import com.taro.service.activiti.ActivityService;import com.taro.service.activiti.ProcessService;import com.taro.service.activiti.ProcessTaskService;import com.taro.service.activiti.ProcessVariableService;import com.taro.service.sec.SecUserService;//import com.taro.service.sec.UserInfoService;import com.taro.utils.ClassRefUtil;import com.taro.utils.Utility;@Servicepublic class ActivityServiceImpl implements ActivityService{	@Autowired  	private RuntimeService runtimeService;		@Autowired  	private TaskService taskService;  		@Autowired  	private HistoryService historyService; 		@Autowired  	private RepositoryService repositoryService; 		@Autowired  	private ProcessEngineConfigurationImpl processEngineConfiguration;  	@Autowired	private ProcessEngine processEngine;	@Autowired	private ActivitiUtil activitiUtil;	@Autowired	private SecUserService secUserService;	@Autowired	private ProcessService processService;	@Autowired	private ProcessTaskService processTaskService;		@Autowired	private ProcessVariableService processVariableService;	/**	 * <p>描述: 根据flow_key查询流程环节</p>  	 * @author 张宇唯  	 * @param flow_key 流程key	 * @date 2018-12-27	 */	public String queryTaskDef(String flow_key){		if(StringUtils.isBlank(flow_key)){			throw new BusinessException("请传入flow_key");		}		HashMap<String, Object> queryMap = new HashMap<>();		queryMap.put("flow_key", flow_key);		queryMap.put("sysFlag", "1");		List<ProcessEntity> processList = processService.list(queryMap);		if(CollectionUtils.isEmpty(processList)){			throw new BusinessException("flow_key查询错误");		}		queryMap.clear();		queryMap.put("process_pid", processList.get(0).getId());		queryMap.put("sysFlag", "1");		List<ProcessTaskEntity> processTaskList = processTaskService.list(queryMap);		return new DataSet<ProcessTaskEntity>(processTaskList).toJson();	}	/**	 * <p>描述: 根据flow_key查询审核环节</p>  	 * @author 张宇唯  	 * @param flow_key 流程key	 * @date 2018-12-27	 */	public String queryCheckTaskDef(String flow_key){		if(StringUtils.isBlank(flow_key)){			throw new BusinessException("请传入flow_key");		}		HashMap<String, Object> queryMap = new HashMap<>();		queryMap.put("flow_key", flow_key);		queryMap.put("sysFlag", "1");		List<ProcessEntity> processList = processService.list(queryMap);		if(CollectionUtils.isEmpty(processList)){			throw new BusinessException("flow_key查询错误");		}		queryMap.clear();		queryMap.put("process_pid", processList.get(0).getId());		queryMap.put("check_task", "1");		queryMap.put("sysFlag", "1");		List<ProcessTaskEntity> processTaskList = processTaskService.list(queryMap);		return new DataSet<ProcessTaskEntity>(processTaskList).toJson();	}		/**	 * <p>描述: 根据用户id查询待办任务列表</p>  	 * @author 张宇唯  	 * @param userId 用户id	 * @date 2018-12-27	 */	public String todoList(String flow_key,String userId,int pageNum,int pageSize) {        PageHelper.startPage(pageNum, pageSize, pageNum == 0 ? false : true);        List<Object> result = new ArrayList<Object>();		if(StringUtils.isBlank(flow_key) || "null".equals(flow_key)){			throw new BusinessException("请传入flow_key");		}		if(StringUtils.isBlank(userId) || "null".equals(userId)){			throw new BusinessException("请传入userId");		}		HashMap<String, Object> queryMap = new HashMap<>();    	queryMap.put("flow_key", flow_key);    	queryMap.put("sysFlag", "1");    	List<ProcessEntity> queryList = processService.list(queryMap);    	if(CollectionUtils.isNotEmpty(queryList)) {    		List<Task> taskList = taskService.createTaskQuery()				.taskCandidateOrAssigned(userId)				.processDefinitionId(queryList.get(0).getProcde_pid())				.orderByTaskCreateTime().desc().listPage(pageSize * (pageNum - 1), pageSize);    		if(CollectionUtils.isNotEmpty(taskList)){    			List<ProcessVariableEntity> variableList = null;    			for(Task task : taskList){    				queryMap.clear();    				queryMap.put("task_id",task.getId());    				queryMap.put("sysFlag","1");    				variableList = processVariableService.list(queryMap);    				if(CollectionUtils.isNotEmpty(variableList)){    					HashMap<String, Class<?>> propertyMap = new HashMap<String, Class<?>>();						try {	    					propertyMap.put("task_id", Class.forName("java.lang.String"));	    					propertyMap.put("task_name", Class.forName("java.lang.String"));	    					for(ProcessVariableEntity variableBean : variableList){	    						if(!propertyMap.containsKey(variableBean.getKey())){    								propertyMap.put(variableBean.getKey(), Class.forName("java.lang.String"));	    						}	    					}    					} catch (ClassNotFoundException e) {						}        					CglibBean bean = new CglibBean(propertyMap);						bean.setValue("task_id", task.getId());						bean.setValue("task_name", task.getName());    					for(ProcessVariableEntity variableBean : variableList){    						bean.setValue(variableBean.getKey(), variableBean.getValue());    					}    					Object object = bean.getObject();    					result.add(object);    				}    			}    		}    	}        Page<Object> page = new Page<Object>(result);		return page.toJson();	}		public void saveVariable(Task task,Map<String,Object> map){		if(null != map){			ProcessVariableEntity processVariable = null;			for(String key : map.keySet()){				processVariable = new ProcessVariableEntity();				processVariable.setTask_id(task.getId());				processVariable.setTask_name(task.getName());				processVariable.setKey(key);				processVariable.setValue(String.valueOf(map.get(key)));				processVariableService.save(processVariable);			}		}	}		/**	 * <p>描述: 根据业务id查询历史信息</p>  	 * @author 张宇唯  	 * @param busi_key 业务id	 * @date 2018-12-27	 */	public String findHistoryByBusiKey(String busi_key){		List<ProcessTaskEntity> returnTaskList = new ArrayList<ProcessTaskEntity>();		List<HistoricTaskInstance> hisTaskList = historyService.createHistoricTaskInstanceQuery()				.processInstanceBusinessKey(busi_key).orderByTaskCreateTime().asc().list();		if(CollectionUtils.isNotEmpty(hisTaskList)){			ProcessTaskEntity processTask = null;			List<Comment> commentList = null;			Comment comment = null;			String comment_jsonStr = "";			for(HistoricTaskInstance task : hisTaskList){				processTask = new ProcessTaskEntity();								commentList = taskService.getTaskComments(task.getId(), task.getTaskDefinitionKey());				if(CollectionUtils.isNotEmpty(commentList)){					comment = commentList.get(0);//默认取第一条					if(null != comment && StringUtils.isNotBlank(comment.getFullMessage())){						comment_jsonStr = comment.getFullMessage();						Map<String, String> commentMap = JSON.parseObject(comment_jsonStr, Map.class);						processTask.setAssignee(task.getAssignee());						processTask.setTask_name(task.getName());						ClassRefUtil.setFieldValue(processTask, commentMap);						if(StringUtils.isNotBlank(commentMap.get("operation_user"))){							SecUserEntity user = secUserService.get(commentMap.get("operation_user"));							if(null != user){								processTask.setOperation_user_name(user.getNickname());							}						}						if(null != task.getStartTime()){							processTask.setStart_time(DateFormatUtils.format(task.getStartTime(), Constant.DF_DATE_YYYYMMDDHHMMSS));//开始时间						}						if(null != task.getEndTime()){							processTask.setEnd_time(DateFormatUtils.format(task.getEndTime(), Constant.DF_DATE_YYYYMMDDHHMMSS));//结束时间						}						returnTaskList.add(processTask);					}				}			}		}		return new DataSet<ProcessTaskEntity>(returnTaskList).toJson();	}	/**	 * <p>描述: 查询待办任务列表的业务ID</p>  	 * @author 张宇唯  	 * @param userId 用户id	 * @date 2019-03-14	 */	public String[] queryBusiIdByTodoList(String flow_key,String userId,String task_def){		if(StringUtils.isBlank(flow_key) || "null".equals(flow_key)){			throw new BusinessException("请传入flow_key");		}		if(StringUtils.isBlank(userId) || "null".equals(userId)){			throw new BusinessException("请传入userId");		}//		if(StringUtils.isBlank(task_def) || "null".equals(task_def)){//			throw new BusinessException("请传入task_def");//		}		HashMap<String, Object> queryMap = new HashMap<String, Object>();    	queryMap.put("flow_key", flow_key);    	queryMap.put("sysFlag", "1");    	List<ProcessEntity> queryList = processService.list(queryMap);    	if(CollectionUtils.isNotEmpty(queryList)) {    		List<Task> taskList = taskService.createTaskQuery()				.taskCandidateOrAssigned(userId)				.processDefinitionId(queryList.get(0).getProcde_pid())				.orderByTaskCreateTime().desc().list();    		if(CollectionUtils.isNotEmpty(taskList)){    			String[] busiKeyArr = new String[taskList.size()];    			for(int i = 0,l = taskList.size(); i < l; i++){    				busiKeyArr[i] = String.valueOf(taskService.getVariable(taskList.get(i).getId(), "busi_key"));    			}    			return busiKeyArr;    		}    	}		return null;	}		/**	 * <p>描述: 查询已办任务列表</p>  	 * @author 张宇唯  	 * @param userId 用户id	 * @date 2019-03-14	 */	public String[] queryBusiIdByDoneList(String flow_key,String userId,String task_def){		if(StringUtils.isBlank(flow_key) || "null".equals(flow_key)){			throw new BusinessException("请传入flow_key");		}		if(StringUtils.isBlank(userId) || "null".equals(userId)){			throw new BusinessException("请传入userId");		}//		if(StringUtils.isBlank(task_def) || "null".equals(task_def)){//			throw new BusinessException("请传入task_def");//		}		HashMap<String, Object> queryMap = new HashMap<String, Object>();    	queryMap.put("flow_key", flow_key);    	queryMap.put("sysFlag", "1");    	List<ProcessEntity> queryList = processService.list(queryMap);    	if(CollectionUtils.isNotEmpty(queryList)) {    		List<HistoricTaskInstance> hisTaskList = historyService.createHistoricTaskInstanceQuery()				.taskAssignee(userId)				.processDefinitionId(queryList.get(0).getProcde_pid())				.orderByTaskCreateTime().desc().list();    		if(CollectionUtils.isNotEmpty(hisTaskList)){    			String[] busiKeyArr = new String[hisTaskList.size()];    			for(int i = 0,l = hisTaskList.size(); i < l; i++){    				List<Comment> commentList = taskService.getTaskComments(hisTaskList.get(i).getId(), "busi_key");    									    				if(CollectionUtils.isNotEmpty(commentList) && StringUtils.isNotBlank(commentList.get(0).getFullMessage())){    					Map<String, String> commentMap = JSON.parseObject(commentList.get(0).getFullMessage(), Map.class);    					busiKeyArr[i] = commentMap.get("busi_key");    				}//    				busiKeyArr[i] = runtimeService.createProcessInstanceQuery()//    					.processInstanceId(hisTaskList.get(i).getProcessInstanceId()).singleResult().getBusinessKey();//    				busiKeyArr[i] = String.valueOf(taskService.getVariable(hisTaskList.get(i).getId(), "busi_key"));    			}    			return busiKeyArr;    		}    	}		return null;	}		/**	 * <p>描述: 根据用户id查询已办任务列表</p>  	 * @author 张宇唯  	 * @param userId 用户id	 * @date 2018-12-27	 */	public String findDoneListByUserId(String flow_key,String userId,int pageNum,int pageSize) {		List<ProcessTaskEntity> returnTaskList = new ArrayList<ProcessTaskEntity>();		List<HistoricTaskInstance> hisTaskList = null;		if(StringUtils.isNotBlank(flow_key)){	    	HashMap<String, Object> queryMap = new HashMap<String, Object>();	    	queryMap.put("flow_key", flow_key);	    	queryMap.put("sysFlag", "1");	    	List<ProcessEntity> queryList = processService.list(queryMap);	    	if(CollectionUtils.isNotEmpty(queryList)) {	    		hisTaskList = historyService.createHistoricTaskInstanceQuery()    				.taskAssignee(userId).processDefinitionId(queryList.get(0).getProcde_pid())    				.orderByTaskCreateTime().desc().listPage(pageSize * (pageNum - 1), pageSize);	    	}else{	    		throw new BusinessException("flow_key查询错误!");	    	}		}else{			hisTaskList = historyService.createHistoricTaskInstanceQuery()				.taskAssignee(userId)				.orderByTaskCreateTime().desc().listPage(pageSize * (pageNum - 1), pageSize);		}				if(CollectionUtils.isNotEmpty(hisTaskList)){			String process_pid = "";//流程id			String busi_key = "";//业务id			String process_name = "";//流程名称			String comment = "";//附加信息			ProcessTaskEntity processTask = null;			for(HistoricTaskInstance task : hisTaskList){				List<HistoricVariableInstance> variableList = historyService.createHistoricVariableInstanceQuery()						.executionId(task.getExecutionId()).list();				HashMap<String, Object> variable = new HashMap<String, Object>();				if(CollectionUtils.isNotEmpty(variableList)){					for(HistoricVariableInstance hisVariable : variableList){						if(StringUtils.isNotBlank(hisVariable.getVariableName())){							variable.put(hisVariable.getVariableName(), hisVariable.getValue());						}					}				}				process_name = Utility.getParameter(variable, "process_name");				process_pid = Utility.getParameter(variable, "process_pid");				busi_key = Utility.getParameter(variable, "busi_key");				comment = Utility.getParameter(variable, "comment");				processTask = processTaskService.getTaskByTaskDef(process_pid, task.getTaskDefinitionKey());				if(null != processTask) {					processTask.setBusi_key(busi_key);//业务id					processTask.setProcess_name(process_name);//流程名称					processTask.setTask_name(task.getName());//环节名称					processTask.setComment(comment);//附加信息					if(null != task.getStartTime()){						processTask.setStart_time(DateFormatUtils.format(task.getStartTime(), Constant.DF_DATE_YYYYMMDDHHMMSS));//开始时间					}					if(null != task.getEndTime()){						processTask.setEnd_time(DateFormatUtils.format(task.getEndTime(), Constant.DF_DATE_YYYYMMDDHHMMSS));//结束时间					}					returnTaskList.add(processTask);				}			}		}		return new DataSet<ProcessTaskEntity>(returnTaskList).toJson();	}	/**	 * <p>描述: 根据用户id查询待办任务列表</p>  	 * @author 张宇唯  	 * @param userId 用户id	 * @date 2018-12-27	 */	public String findTodoListByUserId(String flow_key,String userId,int pageNum,int pageSize) {		List<ProcessTaskEntity> returnTaskList = new ArrayList<ProcessTaskEntity>();		List<Task> taskList = null;		if(StringUtils.isNotBlank(flow_key)){	    	HashMap<String, Object> queryMap = new HashMap<String, Object>();	    	queryMap.put("flow_key", flow_key);	    	queryMap.put("sysFlag", "1");	    	List<ProcessEntity> queryList = processService.list(queryMap);	    	if(CollectionUtils.isNotEmpty(queryList)) {	    		taskList = taskService.createTaskQuery()    				.taskCandidateOrAssigned(userId)    				.processDefinitionId(queryList.get(0).getProcde_pid())    				.orderByTaskCreateTime().desc().listPage(pageSize * (pageNum - 1), pageSize);	    	}else{	    		throw new BusinessException("flow_key查询错误!");	    	}		}else{			taskList = taskService.createTaskQuery()				.taskCandidateOrAssigned(userId)				.orderByTaskCreateTime().desc().listPage(pageSize * (pageNum - 1), pageSize);		}				if(CollectionUtils.isNotEmpty(taskList)){			String process_pid = "";//流程id			String busi_key = "";//业务id			String title = "";//代办标题			String comment = "";//附加信息			ProcessTaskEntity processTask = null;			for(Task task : taskList){				process_pid = String.valueOf(taskService.getVariable(task.getId(), "process_pid"));				busi_key = String.valueOf(taskService.getVariable(task.getId(), "busi_key"));				title = String.valueOf(taskService.getVariable(task.getId(), "title"));				comment = String.valueOf(taskService.getVariable(task.getId(), "comment"));				if(StringUtils.isBlank(title)) {					title = task.getName();				}				processTask = processTaskService.getTaskByTaskDef(process_pid, task.getTaskDefinitionKey());				if(null != processTask) {					processTask.setBusi_key(busi_key);					processTask.setTitle(title);					processTask.setComment(comment);					returnTaskList.add(processTask);				}			}		}		return new DataSet<ProcessTaskEntity>(returnTaskList).toJson();	}		/**	 * <p>描述: 启动流程</p>	 * @author 张宇唯  	 * @param flow_key 流程图id	 * @param businessKey 业务id	 * @date 2018-12-27	 */	public ProcessDataEntity start(String businessKey,String flow_key,Map<String, Object> variable) {		if(null == variable){			variable = new HashMap<String, Object>();		}		if(!variable.containsKey("title")){			variable.put("title", "");		}		String processDefinitionKey = "";    	HashMap<String, Object> queryMap = new HashMap<String, Object>();    	queryMap.put("flow_key", flow_key);    	queryMap.put("sysFlag", "1");    	List<ProcessEntity> queryList = processService.list(queryMap);    	if(CollectionUtils.isNotEmpty(queryList)) {    		processDefinitionKey = queryList.get(0).getProcde_pid();    		variable.put("process_name", queryList.get(0).getName());    		variable.put("process_pid", queryList.get(0).getId());    		variable.put("busi_key", businessKey);    	}else {//    		return new Message(Constant.STATUS_ERROR_GENERAL,"flow_key查询为空").toJson();    		throw new BusinessException("flow_key查询为空");    	}		String idea = String.valueOf(variable.get("idea"));		String idea_message = String.valueOf(variable.get("idea_message"));		String operation_user = String.valueOf(variable.get("operation_user"));		String operation_time = String.valueOf(variable.get("operation_time"));		if(StringUtils.isBlank(idea) || "null".equals(idea)){			idea = "";			variable.put("idea","");		}		if(StringUtils.isBlank(idea_message) || "null".equals(idea_message)){			idea_message = "";			variable.put("idea_message","");		}		if(StringUtils.isBlank(operation_user) || "null".equals(operation_user)){			operation_user = "";//			variable.put("operation_user",SecurityMyUtils.getUserId());		}		if(StringUtils.isBlank(operation_time) || "null".equals(operation_time)){			operation_time = "";			variable.put("operation_time",DateFormatUtils.format(new Date(), Constant.DF_DATE_YYYYMMDDHHMMSS));		}    			ProcessInstance pi = runtimeService.startProcessInstanceById(processDefinitionKey, businessKey, variable);				ProcessDataEntity returnBean = new ProcessDataEntity();		returnBean.setFlow_key(flow_key);		returnBean.setBusi_key(businessKey);		returnBean.setFlow_state("1");		returnBean.setFlow_task_name("");				returnBean.setIdea(idea);		returnBean.setIdea_message(idea_message);		returnBean.setOperation_user(operation_user);		returnBean.setOperation_time(operation_time);				Task task = taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult(); 		if(null !=  task){			returnBean.setTask_id(task.getId());			returnBean.setTask_def(task.getTaskDefinitionKey());			returnBean.setTask_name(task.getName());//	        this.addTaskComment(task, Collections.singletonMap("busi_key", businessKey), "busi_key");//增加任务详细信息		}//		return new DataSetObject<ProcessDataEntity>(returnBean).toJson();		return returnBean;	}	/**	 * 	 * <p>描述: 完成任务</p>  	 * @author 张宇唯  	 * @param businessKey 业务id	 * @param userId 用户id	 * @param assignee 下一环节的执行人	 * @param variable 变量map	 * @date 2018-12-27	 */	public ProcessDataEntity completeTaskByBusiKey(String businessKey,String flow_key,String assignee,Map<String, Object> variable) {		if(null == variable){			variable = new HashMap<String, Object>();		}		if(!variable.containsKey("title")){			variable.put("title", "");		}		String taskId = "";		Task task = null;		List<Task> taskList = taskService.createTaskQuery()				.processInstanceBusinessKey(businessKey)				.orderByTaskCreateTime().desc()				.list();//获取任务对象				if(CollectionUtils.isNotEmpty(taskList)){//即便查出多条也只返回第一条			task = taskList.get(0);		}else {//    		return new Message(Constant.STATUS_ERROR_GENERAL,"busi_key查询任务为空").toJson();			throw new BusinessException("busi_key查询任务为空");		}		        if(StringUtils.isNotBlank(assignee)){        	task.setAssignee(assignee);//设置执行人        	taskService.setAssignee(task.getId(), assignee);        }		String idea = String.valueOf(variable.get("idea"));		String idea_message = String.valueOf(variable.get("idea_message"));		String operation_user = String.valueOf(variable.get("operation_user"));		String operation_time = String.valueOf(variable.get("operation_time"));		if(StringUtils.isBlank(idea) || "null".equals(idea)){			idea = "";			variable.put("idea","");		}		if(StringUtils.isBlank(idea_message) || "null".equals(idea_message)){			idea_message = "";			variable.put("idea_message","");		}		if(StringUtils.isBlank(operation_user) || "null".equals(operation_user)){			operation_user = "";//			variable.put("operation_user",SecurityMyUtils.getUserId());		}		if(StringUtils.isBlank(operation_time) || "null".equals(operation_time)){			operation_time = "";			variable.put("operation_time",DateFormatUtils.format(new Date(), Constant.DF_DATE_YYYYMMDDHHMMSS));		}        this.addTaskComment(task, variable, task.getTaskDefinitionKey());//增加任务详细信息        		taskService.complete(task.getId(), variable);        ProcessInstance pi = runtimeService.createProcessInstanceQuery().processInstanceId(task.getProcessInstanceId()).singleResult();          		ProcessDataEntity returnBean = new ProcessDataEntity();		returnBean.setFlow_key(flow_key);		returnBean.setBusi_key(businessKey);		returnBean.setIdea(idea);		returnBean.setIdea_message(idea_message);		returnBean.setOperation_user(operation_user);		returnBean.setOperation_time(operation_time);        //说明流程实例结束了        if(null == pi) {    		returnBean.setFlow_state("3");    		returnBean.setFlow_task_name("已完成");    		returnBean.setTask_name("已完成");        }else {        	Task nowTask = null;    		List<Task> nowTaskList = taskService.createTaskQuery()    				.processInstanceBusinessKey(businessKey)    				.orderByTaskCreateTime().desc()    				.list();//获取任务对象    		    		if(CollectionUtils.isNotEmpty(nowTaskList)){//即便查出多条也只返回第一条    			nowTask = nowTaskList.get(0);    		}else {//        		return new Message(Constant.STATUS_ERROR_GENERAL,"busi_key查询任务为空").toJson();    			throw new BusinessException("busi_key查询任务为空");    		}    		returnBean.setTask_id(nowTask.getId());    		returnBean.setTask_def(nowTask.getTaskDefinitionKey());    		returnBean.setTask_name(nowTask.getName());    		returnBean.setFlow_state("2");    		returnBean.setFlow_task_name("");    		this.saveVariable(nowTask, variable);        }//		return new DataSetObject<ProcessDataEntity>(returnBean).toJson();        return returnBean;	}	/**	 * <p>描述: 增加任务详细信息</p>  	 * @author 张宇唯  	 * @param task 任务	 * @param variable 变量map	 * @date 2018-12-27	 */	public void addTaskComment(Task task, Map<String, Object> variable, String key){		if(StringUtils.isBlank(key)){			key = "task_comment";		}		String comment_jsonStr = "";		if(null != variable){			JSONObject comment_json = JSONObject.parseObject(JSON.toJSONString(variable));			comment_jsonStr = comment_json.toJSONString();		}        taskService.addComment(task.getId(), task.getProcessInstanceId(), key, comment_jsonStr);	}		/**	 * <p>描述: 完成任务</p>  	 * @author 张宇唯  	 * @param taskId 任务id	 * @param userId 用户id	 * @param assignee 下一环节的执行人	 * @param variable 变量map	 * @date 2018-12-27	 */	public Map completeTask(String taskId,String assignee,Map<String, Object> variable) {				Task task = taskService.newTask(taskId);//获取任务对象		HashMap<String, Object> setMap = new HashMap<String, Object>();		setMap.put("assignee", assignee);		taskService.complete(taskId, variable);		ProcessInstance pi = runtimeService.createProcessInstanceQuery().processInstanceId(task.getProcessInstanceId()).singleResult();				HashMap<String, Object> returnMap = new HashMap<String, Object>();		returnMap.put("busi_key", pi.getBusinessKey());		returnMap.put("task_name", task.getName());		returnMap.put("assignee", assignee);				return returnMap;	}	/**	 * <p>描述: 启动流程</p>	 * @author 张宇唯  	 * @param processDefinitionKey 流程图id	 * @param businessKey 业务id	 * @param startUser 启动人id	 * @param assignee 下一环节的执行人	 * @date 2018-12-27	 */	public ProcessDataEntity startAndComplete(String businessKey,String flow_key,String assignee,Map<String, Object> variable) { 		this.start(businessKey, flow_key, variable);		ProcessDataEntity returnBean = this.completeTaskByBusiKey(businessKey, flow_key, assignee, variable);		return returnBean;	}  	/**	 * <p>描述: 根据用户id查询待办任务列表</p>  	 * @author 张宇唯  	 * @param userId 用户id	 * @param processDefinitionKey 流程图id	 * @date 2018-12-27	 */	public List<Task> findTasksByUserId(String userId, String processDefinitionKey) {		List<Task> resultTask = taskService.createTaskQuery().processDefinitionKey(processDefinitionKey).taskCandidateOrAssigned(userId).list();		return resultTask;	}	public String getInstanceImageByBusiKey(HttpServletResponse response,String businessKey) {		String result = "";		if (StringUtils.isBlank(businessKey)){		} else {			ProcessInstance pit = (ProcessInstance)this.runtimeService.createProcessInstanceQuery().processInstanceBusinessKey(businessKey).singleResult();			if (pit != null) {				result = getInstanceImage(response, pit.getProcessInstanceId());			} else {				HistoricProcessInstance hpit = (HistoricProcessInstance)this.historyService.createHistoricProcessInstanceQuery().processInstanceBusinessKey(businessKey).singleResult();				result = getInstanceImage(response, hpit.getId());			}		}		return result;	}	public String getInstanceImage(HttpServletResponse response,String inst_id) {		if (StringUtils.isBlank(inst_id)) {		} else {			HistoricProcessInstance processInstance = (HistoricProcessInstance)this.historyService.createHistoricProcessInstanceQuery().processInstanceId(inst_id).singleResult();						BpmnModel bpmnModel = this.repositoryService.getBpmnModel(processInstance.getProcessDefinitionId());			ProcessEngineConfiguration processEngineConfiguration = this.processEngine.getProcessEngineConfiguration();			Context.setProcessEngineConfiguration((ProcessEngineConfigurationImpl)processEngineConfiguration);						ProcessDiagramGenerator diagramGenerator = processEngineConfiguration.getProcessDiagramGenerator();			ProcessDefinitionEntity definitionEntity = (ProcessDefinitionEntity)this.repositoryService.getProcessDefinition(processInstance.getProcessDefinitionId());						List<HistoricActivityInstance> highLightedActivitList = this.historyService.createHistoricActivityInstanceQuery().processInstanceId(inst_id).list();						List<String> highLightedActivitis = new ArrayList();						List<String> highLightedFlows = this.activitiUtil.getHighLightedFlows(definitionEntity, highLightedActivitList);			for (HistoricActivityInstance tempActivity : highLightedActivitList) {				String activityId = tempActivity.getActivityId();				highLightedActivitis.add(activityId);			}			try {				InputStream imageStream = diagramGenerator.generateDiagram(bpmnModel, "png", 						highLightedActivitis, highLightedFlows, 						processEngineConfiguration.getActivityFontName(), 						processEngineConfiguration.getLabelFontName(), 						processEngineConfiguration.getLabelFontName(), 						processEngineConfiguration.getClassLoader(), 						1.0D);				OutputStream out = response.getOutputStream();				// 把图片的输入流程写入resp的输出流中	            byte[] b = new byte[1024];	            for (int len = -1; (len= imageStream.read(b))!=-1; ) {	                out.write(b, 0, len);	            }	            // 关闭流	            out.close();	            imageStream.close();			} catch (IOException e) {	            e.printStackTrace();			}		}		return "";	}//	//	/**//	 * 更改业务流程状态#{ActivityDemoServiceImpl.updateBizStatus(execution,"tj")}//	 * @param execution//	 * @param status//	 *///	public void updateBizStatus(DelegateExecution execution,String status) {////		String bizId = execution.getProcessBusinessKey();//		//根据业务id自行处理业务表////		System.out.println("业务表["+bizId+"]状态更改成功，状态更改为："+status);//	}//	//	//	//流程节点权限用户列表${ActivityDemoServiceImpl.findUsers(execution,sign)}//	public List<String> findUsersForSL(DelegateExecution execution){//		return Arrays.asList("sly1","sly2");//	}//	//	//流程节点权限用户列表${ActivityDemoServiceImpl.findUsers(execution,sign)}//	public List<String> findUsersForSP(DelegateExecution execution){//		return Arrays.asList("spy1","uspy2");//	}//	//	/**//	 * //	* <p>描述:  生成流程图//	 * 首先启动流程，获取processInstanceId，替换即可生成</p>  //	* @author 范相如  //	* @date 2018年2月25日  //	* @param processInstanceId//	* @throws Exception//	 *///	public void queryProImg(String processInstanceId) throws Exception {//		//获取历史流程实例  //        HistoricProcessInstance processInstance =  historyService.createHistoricProcessInstanceQuery().processInstanceId(processInstanceId).singleResult();  //       //		//根据流程定义获取输入流//		InputStream is = repositoryService.getProcessDiagram(processInstance.getProcessDefinitionId());//		BufferedImage bi = ImageIO.read(is);//		File file = new File("demo2.png");//		if(!file.exists()) file.createNewFile();//		FileOutputStream fos = new FileOutputStream(file);//		ImageIO.write(bi, "png", fos);//		fos.close();//		is.close();//		System.out.println("图片生成成功");// //		List<Task> tasks = taskService.createTaskQuery().taskCandidateUser("userId").list();//		for(Task t : tasks) {//			System.out.println(t.getName());//		}//	}//	//	//	/**//	 * 流程图高亮显示//	 * 首先启动流程，获取processInstanceId，替换即可生成//	 * @throws Exception//	 *///    public void queryProHighLighted(String processInstanceId) throws Exception {//        //获取历史流程实例  //        HistoricProcessInstance processInstance =  historyService.createHistoricProcessInstanceQuery().processInstanceId(processInstanceId).singleResult();  //        //获取流程图  //        BpmnModel bpmnModel = repositoryService.getBpmnModel(processInstance.getProcessDefinitionId());  //  //        ProcessDiagramGenerator diagramGenerator = processEngineConfiguration.getProcessDiagramGenerator();  //        ProcessDefinitionEntity definitionEntity = (ProcessDefinitionEntity)repositoryService.getProcessDefinition(processInstance.getProcessDefinitionId());  //  //        List<HistoricActivityInstance> highLightedActivitList =  historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstanceId).list();  //        //高亮环节id集合  //        List<String> highLightedActivitis = new ArrayList<String>();  //          //        //高亮线路id集合  //        List<String> highLightedFlows = getHighLightedFlows(definitionEntity,highLightedActivitList);  //  //        for(HistoricActivityInstance tempActivity : highLightedActivitList){  //            String activityId = tempActivity.getActivityId();  //            highLightedActivitis.add(activityId);  //        }  //        //配置字体//        InputStream imageStream = diagramGenerator.generateDiagram(bpmnModel, "png", highLightedActivitis, highLightedFlows,"宋体","微软雅黑","黑体",null,2.0);//        BufferedImage bi = ImageIO.read(imageStream);//        File file = new File("demo2.png");//        if(!file.exists()) file.createNewFile();//        FileOutputStream fos = new FileOutputStream(file);//        ImageIO.write(bi, "png", fos);//        fos.close();//        imageStream.close();//        System.out.println("图片生成成功");//    }  //     /**  //     * 获取需要高亮的线  //     * @param processDefinitionEntity  //     * @param historicActivityInstances  //     * @return  //     */  //    public List<String> getHighLightedFlows(ProcessDefinitionEntity processDefinitionEntity,List<HistoricActivityInstance> historicActivityInstances) {  //          ////        List<String> highFlows = new ArrayList<String>();// 用以保存高亮的线flowId  ////        for (int i = 0; i < historicActivityInstances.size() - 1; i++) {// 对历史流程节点进行遍历  ////            ActivityImpl activityImpl = processDefinitionEntity.findActivity(historicActivityInstances.get(i)  ////                            .getActivityId());// 得到节点定义的详细信息  ////            List<ActivityImpl> sameStartTimeNodes = new ArrayList<ActivityImpl>();// 用以保存后需开始时间相同的节点  ////            ActivityImpl sameActivityImpl1 = processDefinitionEntity  ////                    .findActivity(historicActivityInstances.get(i + 1)  ////                            .getActivityId());  ////            // 将后面第一个节点放在时间相同节点的集合里  ////            sameStartTimeNodes.add(sameActivityImpl1);  ////            for (int j = i + 1; j < historicActivityInstances.size() - 1; j++) {  ////                HistoricActivityInstance activityImpl1 = historicActivityInstances  ////                        .get(j);// 后续第一个节点  ////                HistoricActivityInstance activityImpl2 = historicActivityInstances  ////                        .get(j + 1);// 后续第二个节点  ////                if (activityImpl1.getStartTime().equals(  ////                        activityImpl2.getStartTime())) {  ////                    // 如果第一个节点和第二个节点开始时间相同保存  ////                    ActivityImpl sameActivityImpl2 = processDefinitionEntity  ////                            .findActivity(activityImpl2.getActivityId());  ////                    sameStartTimeNodes.add(sameActivityImpl2);  ////                } else {  ////                    // 有不相同跳出循环  ////                    break;  ////                }  ////            }  ////            List<PvmTransition> pvmTransitions = activityImpl  ////                    .getOutgoingTransitions();// 取出节点的所有出去的线  ////            for (PvmTransition pvmTransition : pvmTransitions) {  ////                // 对所有的线进行遍历  ////                ActivityImpl pvmActivityImpl = (ActivityImpl) pvmTransition  ////                        .getDestination();  ////                // 如果取出的线的目标节点存在时间相同的节点里，保存该线的id，进行高亮显示  ////                if (sameStartTimeNodes.contains(pvmActivityImpl)) {  ////                    highFlows.add(pvmTransition.getId());  ////                }  ////            }  ////        }  ////        return highFlows;  //    	return null;//    } }