package com.taro.service.activiti.impl;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Set;import org.apache.commons.collections.CollectionUtils;import org.apache.commons.lang3.time.DateFormatUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.google.common.collect.Lists;import com.google.common.collect.Sets;import com.taro.constants.Constant;import com.taro.dao.activiti.ProcessTaskDao;import com.taro.entity.activiti.OrgEntity;import com.taro.entity.activiti.ProcessTaskEntity;import com.taro.entity.activiti.RoleEntity;import com.taro.entity.activiti.RoleUserEntity;import com.taro.entity.activiti.UserEntity;//import com.taro.entity.company.AssumeCompanyEntity;//import com.taro.entity.company.RecommendCompanyEntity;//import com.taro.entity.user.UserInfoExtEntity;import com.taro.exception.BusinessException;import com.taro.service.AbstractService;import com.taro.service.activiti.ProcessTaskService;import com.taro.utils.MyStringUtil;/** *<p>Title:ProcessTaskServiceImpl.java</p> *<p>Description:流程任务表ServiceImpl</p> *@author 张宇唯 *@version 1.0 *@Automatically generate by Coder in 2019-01-20 18:34 */@Servicepublic class ProcessTaskServiceImpl extends AbstractService<ProcessTaskEntity> implements ProcessTaskService{	@Autowired	private ProcessTaskDao processTaskDao;	//	@Autowired//	private AssumeCompanyService assumeCompanyService;////	@Autowired//	private RecommendCompanyService recommendCompanyService;//	//	@Autowired//	private UserInfoExtService userInfoExtService;	    @Override    protected ProcessTaskDao getDao () {        return processTaskDao;    }    @Override    public List<UserEntity> listUser (Map<String, Object> parameter) {        return getDao().listUser(parameter);    }    @Override    public List<RoleEntity> listRole (Map<String, Object> parameter) {        return getDao().listRole(parameter);    }    @Override    public List<RoleUserEntity> listRoleUser (Map<String, Object> parameter) {        return getDao().listRoleUser(parameter);    }    @Override    public int deleteByProcess (String id) {        if (id == null) {            throw new BusinessException("传入对象id不能为空");        }        Map<String, Object> parameter = new HashMap<>();        parameter.put("id", id);        String currentDate = DateFormatUtils.format(new Date(), Constant.DF_DATE_YYYYMMDDHHMMSS);        parameter.put("lastModifiedTime", currentDate);        return getDao().deleteByProcess(parameter);    }    @Override    public ProcessTaskEntity getTaskByTaskDef(String process_pid, String task_id) {    	HashMap<String, Object> queryMap = new HashMap<>();    	queryMap.put("process_pid", process_pid);    	queryMap.put("task_id", task_id);    	queryMap.put("sysFlag", "1");    	List<ProcessTaskEntity> queryTaskList = getDao().list(queryMap);    	if(CollectionUtils.isNotEmpty(queryTaskList)) {    		return (queryTaskList.get(0));//即使查出多条也只取第一条    	}    	    	return null;    }        @Override    public Set<String> getUserId(String process_pid, String tenants_pid, String task_id) {    	HashMap<String, Object> queryMap = new HashMap<>();    	queryMap.put("process_pid", process_pid);    	queryMap.put("task_id", task_id);    	queryMap.put("sysFlag", "1");    	List<ProcessTaskEntity> queryTaskList = getDao().list(queryMap);    	if(CollectionUtils.isNotEmpty(queryTaskList)) {    		ProcessTaskEntity processTask = queryTaskList.get(0);//即使查出多条也只取第一条    					queryMap.clear();			queryMap.put("tenants_pid", tenants_pid);//    		// 单位//    		String org = processTask.getCompany();//    		if(MyStringUtil.isNotBlank(org)) {//    			String[] org_arr = org.split(",");//    			queryMap.put("org_ids", org_arr);//    		}//    		    		//角色    		String role = processTask.getRole_pid();    		if(MyStringUtil.isNotBlank(role)) {    			String[] role_arr = role.split(",");    			queryMap.put("role_ids", role_arr);    		}//    		String role_pid = processTask.getRole_pid();//    		if(StringUtils.isNotBlank(role_pid)) {//    			queryMap.clear();//    			String[] role_pid_arr = role_pid.split(",");//    			queryMap.put("role_pids", role_pid_arr);//    			List<RoleUserEntity> RoleUserList = getDao().listRoleUser(queryMap);//    			if(CollectionUtils.isNotEmpty(RoleUserList)) {//    				for(RoleUserEntity roleUserEntity : RoleUserList) {//    					if(StringUtils.isNotBlank(roleUserEntity.getUser_pid()) && !userMap.containsKey(roleUserEntity.getUser_pid())) {//    						userList.add(roleUserEntity.getUser_pid());//    						userMap.put(roleUserEntity.getUser_pid(), "1");//    					}//    				}//    			}//    		}    		//用户//    		String user_pid = processTask.getUser_pid();//    		if(StringUtils.isNotBlank(user_pid)) {//    			String[] userIdArr = user_pid.split(",");//    			if(null != userIdArr) {//    				for(String userId : userIdArr) {//    					if(StringUtils.isNotBlank(userId) && !userMap.containsKey(userId)) {//    						userList.add(userId);//    						userMap.put(userId, "1");//    					}//    				}//    			}//    		}    		return getDao().listUserByTask(queryMap);    	}    	    	return null;    }    @Override    public List<OrgEntity> listTaskOrg(Map<String, Object> parameter) {    	List<OrgEntity> orgList = Lists.newArrayList();    	orgList.add(new OrgEntity("0", "平台"));    	orgList.add(new OrgEntity("1", "总行"));    	orgList.add(new OrgEntity("2", "省行"));    	orgList.add(new OrgEntity("3", "市行"));    	orgList.add(new OrgEntity("4", "支行"));    	orgList.add(new OrgEntity("5", "网点"));        return orgList;    }    @Override    public List<RoleEntity> listTaskRole(Map<String, Object> parameter) {        return getDao().listTaskRole(parameter);    }    @Override    public List<String> getCandidateUsers(String process_pid, String tenants_pid, String task_id) {    	List<String> list = Lists.newArrayList();    	    	HashMap<String, Object> queryMap = new HashMap<>();    	queryMap.put("process_pid", process_pid);    	queryMap.put("task_id", task_id);    	queryMap.put("sysFlag", "1");    	List<ProcessTaskEntity> queryTaskList = getDao().list(queryMap);    	if(CollectionUtils.isNotEmpty(queryTaskList)) {    		ProcessTaskEntity processTask = queryTaskList.get(0);//即使查出多条也只取第一条    		queryMap.clear();    		queryMap.put("tenants_pid", tenants_pid);    		// 机构    		String org = processTask.getCompany();    		if(MyStringUtil.isNotBlank(org)) {    			if(org.indexOf("0") != -1) {    				list.add("org_1001");    			}    			String[] org_arr = org.split(",");    			queryMap.put("org_ids", org_arr);    			list.addAll(getDao().listCandidateOrg(queryMap));    		}    		    		//角色    		String role = processTask.getRole_pid();    		if(MyStringUtil.isNotBlank(role)) {    			String[] role_arr = role.split(",");    			queryMap.put("role_ids", role_arr);    			list.addAll(getDao().listCandidateRole(queryMap));    		}    	}    	    	return list;    }    }