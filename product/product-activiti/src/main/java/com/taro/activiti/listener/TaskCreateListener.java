package com.taro.activiti.listener;import java.util.List;import org.activiti.engine.HistoryService;import org.activiti.engine.RepositoryService;import org.activiti.engine.RuntimeService;import org.activiti.engine.TaskService;import org.activiti.engine.delegate.event.ActivitiEntityEvent;import org.activiti.engine.delegate.event.ActivitiEvent;import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;import org.activiti.engine.impl.persistence.entity.TaskEntity;import org.apache.commons.collections.CollectionUtils;import org.apache.commons.lang3.StringUtils;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import com.taro.activiti.handler.ActivitiEventHandler;import com.taro.service.activiti.ProcessTaskService;/**  * Activiti的任务完成事件处理器  * @author  张宇唯 * @date  2019-01-14 */  @Component("taskCreateListener")public class TaskCreateListener implements ActivitiEventHandler{		private static final Logger LOG = Logger.getLogger(TaskCreateListener.class);		@Autowired  	private RuntimeService runtimeService;		@Autowired  	private TaskService taskService;  		@Autowired  	private HistoryService historyService;  		@Autowired  	private RepositoryService repositoryService;  		@Autowired  	private ProcessEngineConfigurationImpl processEngineConfiguration; 	@Autowired  	private ProcessTaskService processTaskService;		@Override  	public void handle(ActivitiEvent event) { 		if(event instanceof ActivitiEntityEvent){	        ActivitiEntityEvent entityEvent = (ActivitiEntityEvent)event;	        Object entity = entityEvent.getEntity();	        if(entity instanceof TaskEntity){	            TaskEntity task = (TaskEntity) entity;	            String task_def = task.getTaskDefinitionKey();            	String process_pid = String.valueOf(taskService.getVariable(task.getId(), "process_pid"));            	String tenants_pid = String.valueOf(taskService.getVariable(task.getId(), "tenants_pid"));            	if(StringUtils.isNotBlank(task_def) && StringUtils.isNotBlank(process_pid)         			&& !"null".equals(process_pid)) {            		List<String> userList = processTaskService.getCandidateUsers(process_pid, tenants_pid, task_def);            		if(CollectionUtils.isNotEmpty(userList)) {            			task.addCandidateUsers(userList);            		}else{//                		task.addCandidateUser(SecurityMyUtils.getUserId());            		}            	}	        }		}	} }