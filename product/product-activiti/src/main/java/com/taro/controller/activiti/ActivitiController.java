package com.taro.controller.activiti;import java.io.InputStream;import java.io.OutputStream;import java.io.UnsupportedEncodingException;import java.net.URLDecoder;import java.util.ArrayList;import java.util.Collection;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletResponse;import javax.validation.Validator;import org.activiti.bpmn.model.BpmnModel;import org.activiti.bpmn.model.FlowElement;import org.activiti.bpmn.model.UserTask;import org.activiti.engine.HistoryService;//import java.util.List;import org.activiti.engine.ProcessEngine;import org.activiti.engine.RepositoryService;import org.activiti.engine.RuntimeService;import org.activiti.engine.TaskService;import org.activiti.engine.history.HistoricActivityInstance;import org.activiti.engine.history.HistoricProcessInstance;import org.activiti.engine.history.HistoricTaskInstance;import org.activiti.engine.impl.RepositoryServiceImpl;import org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity;import org.activiti.engine.repository.ProcessDefinition;import org.apache.commons.collections.CollectionUtils;import org.apache.commons.lang3.StringUtils;import org.myActiviti.ProcessDiagramGenerator;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import com.alibaba.fastjson.JSON;import com.taro.common.DataSet;import com.taro.common.Message;import com.taro.constants.Constant;import com.taro.entity.activiti.ProcessEntity;import com.taro.entity.activiti.ProcessTaskEntity;import com.taro.exception.BusinessException;import com.taro.service.activiti.ActivityService;import com.taro.utils.Utility;/**  * Activiti接口  * @author  张宇唯 * @date  2019-01-14 */  @RestController@RequestMapping("/activiti")public class ActivitiController{	@Autowired	protected Validator validator;		@Autowired	private ProcessEngine processEngine;		@Autowired	private RepositoryService repositoryService;	@Autowired	private RuntimeService runtimeService;	@Autowired  	private TaskService taskService;  		@Autowired  	private HistoryService historyService;  		@Autowired  	private ActivityService activityService;  	@RequestMapping(value = "/queryTaskDef", produces = Constant.JSON_UTF_8)	public String queryTaskDef(@RequestParam Map<String, Object> parameter){		String flow_key = Utility.getParameter(parameter, "flow_key");		String returnStr = "";		try {			returnStr = activityService.queryTaskDef(flow_key);		} catch (Exception e) {			e.printStackTrace();			returnStr = new Message(Constant.STATUS_ERROR_GENERAL,"流程环节查询失败").toJson();		}		return returnStr;	}	@RequestMapping(value = "/queryCheckTaskDef", produces = Constant.JSON_UTF_8)	public String queryCheckTaskDef(@RequestParam Map<String, Object> parameter){		String flow_key = Utility.getParameter(parameter, "flow_key");		String returnStr = "";		try {			returnStr = activityService.queryCheckTaskDef(flow_key);		} catch (Exception e) {			e.printStackTrace();			returnStr = new Message(Constant.STATUS_ERROR_GENERAL,"流程环节查询失败").toJson();		}		return returnStr;	}		@RequestMapping(value = "/findHistoryByBusiKey", produces = Constant.JSON_UTF_8)	public String findHistoryByBusiKey(@RequestParam Map<String, Object> parameter){		String busi_key = Utility.getParameter(parameter, "busi_key");		if(StringUtils.isBlank(busi_key)){    		return new Message(Constant.STATUS_ERROR_GENERAL,"请传入busi_key").toJson();		}		String returnStr = "";		try {			returnStr = activityService.findHistoryByBusiKey(busi_key);		} catch (Exception e) {			e.printStackTrace();			returnStr = new Message(Constant.STATUS_ERROR_GENERAL,"已办任务查询失败").toJson();		}		return returnStr;	}	@RequestMapping(value = "/getInstanceImageByBusiKey")	public String getInstanceImageByBusiKey(HttpServletResponse response, @RequestParam String busi_key){		if(StringUtils.isBlank(busi_key)){    		return new Message(Constant.STATUS_ERROR_GENERAL,"请传入busi_key").toJson();		}		activityService.getInstanceImageByBusiKey(response, busi_key);		return "";	}		@RequestMapping(value = "/findDoneListByUserId", produces = Constant.JSON_UTF_8)	public String findDoneListByUserId(@RequestParam(value = Constant.PAGE_NUM, defaultValue = Constant.PAGE_DEFAULT_VALUE) int pageNum,			@RequestParam(value = Constant.PAGE_SIZE, defaultValue = Constant.PAGE_SIZE_DEFAULT_VALUE) int pageSize,			@RequestParam Map<String, Object> parameter){		String flow_key = Utility.getParameter(parameter, "flow_key");		String userId = Utility.getParameter(parameter, "userId");		if(StringUtils.isBlank(userId)){    		return new Message(Constant.STATUS_ERROR_GENERAL,"请传入userId").toJson();		}		String returnStr = "";		try {			returnStr = activityService.findDoneListByUserId(flow_key,userId, pageNum, pageSize);		} catch (Exception e) {			e.printStackTrace();			returnStr = new Message(Constant.STATUS_ERROR_GENERAL,"已办任务查询失败").toJson();		}		return returnStr;	}		@RequestMapping(value = "/findTodoListByUserId", produces = Constant.JSON_UTF_8)	public String findTodoListByUserId(@RequestParam(value = Constant.PAGE_NUM, defaultValue = Constant.PAGE_DEFAULT_VALUE) int pageNum,			@RequestParam(value = Constant.PAGE_SIZE, defaultValue = Constant.PAGE_SIZE_DEFAULT_VALUE) int pageSize,			@RequestParam Map<String, Object> parameter){		String flow_key = Utility.getParameter(parameter, "flow_key");		String userId = Utility.getParameter(parameter, "userId");		if(StringUtils.isBlank(userId)){    		return new Message(Constant.STATUS_ERROR_GENERAL,"请传入userId").toJson();		}		String returnStr = "";		try {			returnStr = activityService.findTodoListByUserId(flow_key,userId, pageNum, pageSize);		} catch (Exception e) {			e.printStackTrace();			returnStr = new Message(Constant.STATUS_ERROR_GENERAL,"代办任务查询失败").toJson();		}		return returnStr;	}		@RequestMapping("start")	public String start(@RequestParam Map<String, Object> parameter){		parameter = decode(parameter);				String flow_key = Utility.getParameter(parameter, "flow_key");		String busi_key = Utility.getParameter(parameter, "busi_key");		String variables_json = Utility.getParameter(parameter, "variables_json");		if(StringUtils.isBlank(flow_key)) {    		return new Message(Constant.STATUS_ERROR_GENERAL,"请传入flow_key").toJson();		}		if(StringUtils.isBlank(busi_key)) {    		return new Message(Constant.STATUS_ERROR_GENERAL,"请传入busi_key").toJson();		}		Map<String, Object> variablesMap = new HashMap<String, Object>();			if(StringUtils.isNotBlank(variables_json)) {			variablesMap = JSON.parseObject(variables_json, Map.class);		}		String returnStr = "";		try {//			returnStr = activityService.start(flow_key, busi_key, variablesMap);		} catch (Exception e) {			e.printStackTrace();			returnStr = new Message(Constant.STATUS_ERROR_GENERAL,"流程启动失败").toJson();		}		return returnStr;	}	@RequestMapping("completeTaskByBusiKey")	public String completeTaskByBusiKey(@RequestParam Map<String, Object> parameter){		parameter = decode(parameter);				String flow_key = Utility.getParameter(parameter, "flow_key");		String busi_key = Utility.getParameter(parameter, "busi_key");		String assignee = Utility.getParameter(parameter, "assignee");		String variables_json = Utility.getParameter(parameter, "variables_json");		if(StringUtils.isBlank(flow_key)) {    		return new Message(Constant.STATUS_ERROR_GENERAL,"请传入flow_key").toJson();		}		if(StringUtils.isBlank(busi_key)) {    		return new Message(Constant.STATUS_ERROR_GENERAL,"请传入busi_key").toJson();		}		if(StringUtils.isBlank(assignee)) {    		return new Message(Constant.STATUS_ERROR_GENERAL,"请传入assignee").toJson();		}		Map<String, Object> variablesMap = new HashMap<String, Object>();			if(StringUtils.isNotBlank(variables_json)) {			variablesMap = JSON.parseObject(variables_json, Map.class);		}		String returnStr = "";		try {//			returnStr = activityService.completeTaskByBusiKey(busi_key, flow_key, assignee,variablesMap);		} catch (Exception e) {			e.printStackTrace();			returnStr = new Message(Constant.STATUS_ERROR_GENERAL,"任务完成失败").toJson();		}		return returnStr;	}	@RequestMapping(value = "/listTodo", produces = Constant.JSON_UTF_8)	public String listTodo(@RequestParam Map<String, Object> parameter){			return "";	}	@RequestMapping(value = "/listDone", produces = Constant.JSON_UTF_8)	public String listDone(@RequestParam Map<String, Object> parameter){		String flow_key = Utility.getParameter(parameter, "flow_key");		String userId = Utility.getParameter(parameter, "userId");		List<HistoricTaskInstance>  hisTaskList = historyService.createHistoricTaskInstanceQuery()				.processDefinitionKey(flow_key)				.taskCandidateUser(userId).orderByTaskId().desc().list();		return "";	}	//	//	@RequestMapping("helloWorld") //    public void helloWorld() { ////        //根据bpmn文件部署流程 ////        Deployment deploy = repositoryService.createDeployment()////        .addClasspathResource("processes/MyProcess.bpmn")////        .deploy(); ////        //获取流程定义 ////        ProcessDefinition processDefinition = repositoryService.createProcessDefinitionQuery().deploymentId(deploy.getId()).singleResult(); ////        //启动流程定义，返回流程实例 ////        ProcessInstance pi = runtimeService.startProcessInstanceById(processDefinition.getId()); ////        String processId = pi.getId(); ////        System.out.println("流程创建成功，当前流程实例ID："+processId); ////        Task task=taskService.createTaskQuery().processInstanceId(processId).singleResult(); ////        System.out.println("执行前，任务名称："+task.getName()); ////        taskService.complete(task.getId()); ////        task = taskService.createTaskQuery().processInstanceId(processId).singleResult(); ////        System.out.println("task为null，任务执行完毕："+task); ////	}	@RequestMapping(value = "/getProcessTask", produces = Constant.JSON_UTF_8, method = RequestMethod.GET)	public String getProcessTrace(String flow_key){		BpmnModel model = repositoryService.getBpmnModel(flow_key);		List<ProcessTaskEntity> list = new ArrayList<ProcessTaskEntity>();		ProcessTaskEntity ProcessTaskEntity = null;		UserTask userTask = null;		if(model != null) {		    Collection<FlowElement> flowElements = model.getMainProcess().getFlowElements();		    for(FlowElement flowElement : flowElements) {		    	if(null != flowElement && flowElement instanceof UserTask) {		    		userTask = (UserTask)flowElement;		    		ProcessTaskEntity = new ProcessTaskEntity();		    		ProcessTaskEntity.setTask_id(userTask.getId());		    		ProcessTaskEntity.setTask_name(flowElement.getName());		    		list.add(ProcessTaskEntity);		    	}		    }		}		return new DataSet<ProcessTaskEntity>(list).toJson();	}	@RequestMapping(value = "/getProcess", produces = Constant.JSON_UTF_8, method = RequestMethod.GET)	public String findProcessDefinition(String flow_key){        List<ProcessDefinition> list = processEngine.getRepositoryService()//与流程定义和部署对象相关的Service                        .createProcessDefinitionQuery()//创建一个流程定义查询                        /*指定查询条件,where条件*/                        //.deploymentId(deploymentId)//使用部署对象ID查询                        //.processDefinitionId(processDefinitionId)//使用流程定义ID查询//                        .processDefinitionKey(flow_key)//使用流程定义的KEY查询                        //.processDefinitionNameLike(processDefinitionNameLike)//使用流程定义的名称模糊查询                                                /*排序*/                        .orderByProcessDefinitionVersion().asc()//按照版本的升序排列                        //.orderByProcessDefinitionName().desc()//按照流程定义的名称降序排列                                                .list();//返回一个集合列表，封装流程定义                        //.singleResult();//返回唯一结果集                        //.count();//返回结果集数量                        //.listPage(firstResult, maxResults)//分页查询                List<ProcessEntity> result = new ArrayList<ProcessEntity>();        ProcessEntity processEntity = null;        if(CollectionUtils.isNotEmpty(list)){            for(ProcessDefinition processDefinition : list){            	processEntity = new ProcessEntity();            	processEntity.setPd_id(processDefinition.getId());//流程定义的key+版本+随机生成数            	processEntity.setPd_name(processDefinition.getName());//对应HelloWorld.bpmn文件中的name属性值            	processEntity.setPd_key(processDefinition.getKey());//对应HelloWorld.bpmn文件中的id属性值            	processEntity.setPd_version(processDefinition.getVersion());//当流程定义的key值相同的情况下，版本升级，默认从1开始            	processEntity.setPd_resourceName(processDefinition.getResourceName());            	processEntity.setPd_diagramResourceName(processDefinition.getDiagramResourceName());            	processEntity.setPd_deploymentId(processDefinition.getDeploymentId());            	result.add(processEntity);            }        }		return new DataSet<ProcessEntity>(result).toJson();    }	/** 	 * 获取流程图像，已执行节点和流程线高亮显示	 */	@RequestMapping(value = "/viewImage")	public void viewImage(@RequestParam String id, HttpServletResponse response) throws Exception {		// 设置页面不缓存		response.setHeader("Pragma", "No-cache");		response.setHeader("Cache-Control", "no-cache");		response.setDateHeader("Expires", 0);		try {			//  获取历史流程实例			HistoricProcessInstance historicProcessInstance = historyService.createHistoricProcessInstanceQuery()					.processInstanceId(id).singleResult();			if (historicProcessInstance == null) {				throw new BusinessException("获取流程实例ID[" + id + "]对应的历史流程实例失败！");			} else {				// 获取流程定义				ProcessDefinitionEntity processDefinition = (ProcessDefinitionEntity) ((RepositoryServiceImpl) repositoryService)						.getDeployedProcessDefinition(historicProcessInstance.getProcessDefinitionId());				// 获取流程历史中已执行节点，并按照节点在流程中执行先后顺序排序				List<HistoricActivityInstance> historicActivityInstanceList = historyService.createHistoricActivityInstanceQuery()						.processInstanceId(id).orderByHistoricActivityInstanceId().asc().list();				// 已执行的节点ID集合				List<String> executedActivityIdList = new ArrayList<String>();				int index = 1;				for (HistoricActivityInstance activityInstance : historicActivityInstanceList) {					executedActivityIdList.add(activityInstance.getActivityId());					index++;				}				// 获取流程图图像字符流				InputStream imageStream = ProcessDiagramGenerator.generateDiagram(processDefinition, "png", executedActivityIdList);				response.setContentType("image/png");				OutputStream os = response.getOutputStream();				int bytesRead = 0;				byte[] buffer = new byte[8192];				while ((bytesRead = imageStream.read(buffer, 0, 8192)) != -1) {					os.write(buffer, 0, bytesRead);				}				os.close();				imageStream.close();			}		} catch (Exception e) {			throw new BusinessException("获取流程图失败！" + e.getMessage());		}	}		/**	 * decode:字符串转码. <br/>	 * @author 张宇唯	 * @param parameter	 * @return	 */	public Map<String, Object> decode(Map<String, Object> parameter){		String param = String.valueOf(parameter.get("variables_json"));		if(StringUtils.isNotBlank(param) && !param.trim().equals("null") ){			try {				String variables_json = URLDecoder.decode(param,"utf-8");				parameter.put("variables_json", variables_json);			} catch (UnsupportedEncodingException e) {				e.printStackTrace();			}		}		return parameter;	}	}