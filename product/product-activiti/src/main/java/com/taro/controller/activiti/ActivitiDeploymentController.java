package com.taro.controller.activiti;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.util.ArrayList;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletResponse;import org.activiti.engine.RepositoryService;import org.activiti.engine.repository.Deployment;import org.apache.commons.collections.CollectionUtils;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import com.taro.activiti.entity.DeploymentResponse;import com.taro.common.Message;import com.taro.common.Page;import com.taro.constants.Constant;import com.taro.controller.AbstractController;import com.taro.entity.AbstractEntity;import com.taro.exception.BusinessException;import com.taro.service.AbstractService;/**  * Activiti部署接口  * @author  张宇唯 * @date  2019-01-14 */  @RestController@RequestMapping("/activitiDeployment")public class ActivitiDeploymentController extends AbstractController<AbstractEntity>{	public final static String MODULE = "Activiti部署";	public final static String ENTITY = "AbstractEntity";		@Autowired    RepositoryService repositoryService;	@Override	protected AbstractService<AbstractEntity> getService() {		return null;	}	@Override    public String getModule() {		return MODULE;	}	@RequestMapping(value = "/list",produces = Constant.JSON_UTF_8)	public String list(@RequestParam(value = Constant.PAGE_NUM, defaultValue = Constant.PAGE_DEFAULT_VALUE) int pageNum,			@RequestParam(value = Constant.PAGE_SIZE, defaultValue = Constant.PAGE_SIZE_DEFAULT_VALUE) int pageSize,			@RequestParam Map<String, Object> parameter){		listBefore(parameter);				long count = repositoryService.createDeploymentQuery().count();				List<Deployment> deployments = repositoryService.createDeploymentQuery().orderByDeploymenTime().desc().listPage(pageSize * (pageNum - 1), pageSize);				List<DeploymentResponse> list = new ArrayList<>();        for(Deployment deployment: deployments){            list.add(new DeploymentResponse(deployment));        }        		Page<DeploymentResponse> result = new Page<>(list);		result.setTotal(count);		return result.toJson(ignoreAttr.get(Constant.IGNORE_ATTR_LIST));	}	@RequestMapping(value = "/deleteDeployment", method = RequestMethod.GET, produces = Constant.JSON_UTF_8)	public String delete(@RequestParam String ids) {		if(StringUtils.isBlank(ids)) {            return new Message(Constant.STATUS_ERROR_GENERAL,"请传入id!").toJson();		}		String[] idArr = ids.split(",");		if(null != idArr) {			for(String id : idArr) {		        repositoryService.deleteDeployment(id, true);			}		}		return new Message(Constant.STATUS_OK,"删除成功!").toJson();	}	@RequestMapping(value = "/viewImage", method = RequestMethod.GET, produces = Constant.JSON_UTF_8)	public String viewImage(HttpServletResponse response, @RequestParam String id){		if(StringUtils.isBlank(id)) {			throw new BusinessException("传入对象id不能为空");		}		List<String> nameList = repositoryService.getDeploymentResourceNames(id);//此处方法实际项目应该放在service里面		if(CollectionUtils.isNotEmpty(nameList)) {			String imageName = "";			for(String name : nameList) {				if(StringUtils.isNotBlank(name) && name.indexOf(".png") >= 0){	                imageName = name;				}			}			InputStream in = null;			OutputStream out = null;			try {				in = repositoryService.getResourceAsStream(id, imageName);				response.setContentType("text/html;charset=UTF-8");				out = response.getOutputStream();				// 把图片的输入流程写入resp的输出流中	            byte[] b = new byte[1024];	            for (int len = -1; (len= in.read(b))!=-1; ) {	                out.write(b, 0, len);	            }			} catch (IOException e) {	            e.printStackTrace();			} finally {				try {		            // 关闭流		            out.close();		            in.close();				} catch (IOException e2) {		            e2.printStackTrace();				}			}		}		return "";    }}