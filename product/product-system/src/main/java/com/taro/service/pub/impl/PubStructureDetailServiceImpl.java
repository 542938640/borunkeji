package com.taro.service.pub.impl;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import org.apache.commons.collections4.CollectionUtils;import org.apache.commons.lang3.StringUtils;import org.apache.commons.lang3.time.DateFormatUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.google.common.collect.Lists;import com.google.common.collect.Maps;import com.taro.constants.Constant;import com.taro.dao.pub.PubStructureDetailDao;import com.taro.entity.pub.PubStructureDetailEntity;import com.taro.entity.pub.PubStructureEntity;import com.taro.exception.BusinessException;import com.taro.service.AbstractService;import com.taro.service.pub.PubStructureDetailService;import com.taro.service.pub.PubStructureRelationService;import com.taro.service.pub.PubStructureService;import com.taro.utils.Utility;/** *<p>Title:PubStructureDetailServiceImpl.java</p> *<p>Description:结构节点关系信息ServiceImpl</p> *@author 张宇唯 *@version 1.0 *@Automatically generate by Coder in 2019-07-31 10:56 */@Servicepublic class PubStructureDetailServiceImpl extends AbstractService<PubStructureDetailEntity> implements PubStructureDetailService{	@Autowired	private PubStructureDetailDao pubStructureDetailDao;	@Autowired	private PubStructureService pubStructureService;		@Autowired	private PubStructureRelationService pubStructureRelationService;    	@Override    protected PubStructureDetailDao getDao () {        return pubStructureDetailDao;    }    @Override    public List<PubStructureDetailEntity> listTopNode (Map<String, Object> parameter) {    	return getDao().listTopNode(parameter);    }        @Override    public List<PubStructureDetailEntity> listTree (Map<String, Object> parameter) {    	if(null == parameter || !parameter.containsKey("structure_pid")) {    		return null;    	}    	    	String structure_pid = String.valueOf(parameter.get("structure_pid"));    	PubStructureEntity pubStructureEntity = pubStructureService.get(structure_pid);    	if(null == pubStructureEntity) {            throw new BusinessException("对象查询错误!");    	}    	    	List<PubStructureDetailEntity> treeList = new ArrayList<PubStructureDetailEntity>();    	//根节点    	PubStructureDetailEntity rootNode = new PubStructureDetailEntity();    	rootNode.setId("-1");    	rootNode.setChildbase_pid("-1");    	rootNode.setChildbase_name(pubStructureEntity.getName());        treeList.add(rootNode);    	    	parameter.put("sysFlag", "1");        List<PubStructureDetailEntity> nodeList = getDao().list(parameter);        if(CollectionUtils.isNotEmpty(nodeList)) {        	//声明一个map，用来过滤已操作过的数据            Map<String,String> map = Maps.newHashMapWithExpectedSize(nodeList.size());            treeList.forEach(root -> getChild(root, nodeList, map));//传递根对象和一个空map        }        return treeList;    }        private void getChild(PubStructureDetailEntity rootNode, List<PubStructureDetailEntity> nodeList, Map<String,String> map){        List<PubStructureDetailEntity> childList = Lists.newArrayList();        nodeList.stream()                .filter(node -> !map.containsKey(node.getParentbase_pid()))//map内不包含子节点的父id                .filter(node -> node.getParentbase_pid().equals(rootNode.getChildbase_pid()))//子节点的父id==根节点的子id 继续循环                .forEach(node -> {                    map.put(node.getParentbase_pid(), node.getId());//当前节点父id和节点id                    getChild(node, nodeList, map);//递归调用                    childList.add(node);                });        rootNode.setChildren(childList);    }        @Override    public PubStructureDetailEntity savePubStructureDetail (PubStructureDetailEntity model) {    	if(null == model) {            throw new BusinessException("保存对象不能为空!");    	}    	    	if(StringUtils.isBlank(model.getId())) {    		super.save(model);    	}else {    		super.update(model);    	}    	        return model;    }    @Override    public int deletePubStructureDetail (String ids) {    	int num = super.deleteAll(ids);    	    	if(StringUtils.isNotBlank(ids)) {    		pubStructureRelationService.deleteAllByStructureDetailPid(ids);    	}    	        return num;    }    @Override    public int deleteAllByStructurePid(String ids){        //校验参数        Utility.raiseIfWrong(ids, "ids不能为空");        String[] pids = ids.split(Constant.COMMA);        Map<String, Object> parameter = new HashMap<String, Object>();        parameter.put("ids", pids);        String currentDate = DateFormatUtils.format(new Date(), Constant.DF_DATE_YYYYMMDDHHMMSS);        parameter.put("lastModifiedTime", currentDate);//        Subject subject = SecurityUtils.getSubject();//        if (subject.isAuthenticated()) {//            String userId = SecurityMyUtils.getUserId();//            if (userId != null) {//                parameter.put("lastModifier", userId);//            }//        }        return getDao().deleteAllByStructurePid(parameter);    }}