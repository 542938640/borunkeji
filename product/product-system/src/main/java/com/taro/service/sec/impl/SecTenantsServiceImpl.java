package com.taro.service.sec.impl;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import org.apache.commons.collections4.CollectionUtils;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.github.pagehelper.PageHelper;import com.google.common.collect.Lists;import com.google.common.collect.Maps;import com.taro.common.Page;import com.taro.constants.Constant;import com.taro.dao.sec.SecTenantsDao;import com.taro.entity.sec.SecRoleEntity;import com.taro.entity.sec.SecTenantsEntity;import com.taro.entity.sec.SecTenantsLevelRoleEntity;import com.taro.entity.sec.SecUserEntity;import com.taro.exception.BusinessException;import com.taro.service.AbstractService;import com.taro.service.sec.SecRoleService;import com.taro.service.sec.SecTenantsLevelRoleService;import com.taro.service.sec.SecTenantsService;import com.taro.service.sec.SecUserService;import com.taro.utils.MD5Utils;import com.taro.utils.MyStringUtil;import com.taro.utils.UuidUtil;/** *<p>Title:SecTenantsServiceImpl.java</p> *<p>Description: ServiceImpl</p> *@author 张宇唯 *@version 1.0 *@Automatically generate by Coder in 2020-10-11 22:31:42 */@Servicepublic class SecTenantsServiceImpl extends AbstractService<SecTenantsEntity> implements SecTenantsService {		@Autowired	private SecTenantsDao secTenantsDao;	@Autowired	private SecUserService secUserService;	@Autowired	private SecRoleService secRoleService;		@Autowired	private SecTenantsLevelRoleService secTenantsLevelRoleService;	    @Override    protected SecTenantsDao getDao() {        return secTenantsDao;    }    @Override    public List<SecTenantsEntity> listTreeById (Map<String, Object> parameter) {    	List<SecTenantsEntity> treeList = new ArrayList<>();    	//根节点    	SecTenantsEntity rootNode = super.get(parameter);        treeList.add(rootNode);    	    	parameter.put("sysFlag", "1");        List<SecTenantsEntity> nodeList = getDao().listTreeById(parameter);        if(CollectionUtils.isNotEmpty(nodeList)) {        	// 声明一个map，用来过滤已操作过的数据            Map<String,String> map = Maps.newHashMapWithExpectedSize(nodeList.size());            treeList.forEach(root -> getChild(root, nodeList, map));//传递根对象和一个空map        }        return treeList;    }        @Override    public List<SecTenantsEntity> listTree (Map<String, Object> parameter) {    	List<SecTenantsEntity> treeList = new ArrayList<>();    	//根节点    	SecTenantsEntity rootNode = new SecTenantsEntity();    	rootNode.setId("1001");    	rootNode.setName("节点维护根");        treeList.add(rootNode);    	    	parameter.put("sysFlag", "1");        List<SecTenantsEntity> nodeList = getDao().list(parameter);        if(CollectionUtils.isNotEmpty(nodeList)) {        	// 声明一个map，用来过滤已操作过的数据            Map<String,String> map = Maps.newHashMapWithExpectedSize(nodeList.size());            treeList.forEach(root -> getChild(root, nodeList, map));//传递根对象和一个空map        }        return treeList;    }    private void getChild(SecTenantsEntity rootNode, List<SecTenantsEntity> nodeList, Map<String,String> map){        List<SecTenantsEntity> childList = Lists.newArrayList();        nodeList.stream()                .filter(node -> !map.containsKey(node.getId()))//节点id                .filter(node -> node.getParent_pid().equals(rootNode.getId()))//子节点的父id==根节点的子id 继续循环                .forEach(node -> {                    map.put(node.getId(), node.getId());//节点id                    getChild(node, nodeList, map);//递归调用                    childList.add(node);                });        rootNode.setChildren(childList);    }        @Override    public SecTenantsEntity saveSecTenants (SecTenantsEntity model) {    	if(null == model) {            throw new BusinessException("保存对象不能为空!");    	}else if(MyStringUtil.isBlank(model.getName())) {            throw new BusinessException("商户名称不能为空!");    	}else if(MyStringUtil.isBlank(model.getCode())) {            throw new BusinessException("商户编码不能为空!");    	}else if(MyStringUtil.isBlank(model.getTenants_pid())) {            throw new BusinessException("上级商户不能为空!");    	}    	    	Integer level = 0;    	if(!Constant.ADMIN_TENANTS.equals(model.getTenants_pid())) {        	SecTenantsEntity parentBean = super.get(model.getTenants_pid());        	if(null == parentBean || "0".equals(parentBean.getSysFlag())) {                throw new BusinessException("上级商户不存在,请确认!");        	}else if(parentBean.getLevel().equals(Constant.OUTLETS_BANK)) {                throw new BusinessException("网点不能再新增下级商户,请确认!");        	}        	level = parentBean.getLevel();    	}    	level ++;//    	if(level.equals(5) && MyStringUtil.isBlank(model.getC5())) {//            throw new BusinessException("网点注册码不能为空!");//    	}    	Map<String, Object> queryMap = new HashMap<>();    	queryMap.put("not_id", model.getId());    	queryMap.put("sysFlag", "1");    	queryMap.put("nameEq", model.getName());    	List<SecTenantsEntity> queryList = getDao().list(queryMap);    	if(CollectionUtils.isNotEmpty(queryList)) {            throw new BusinessException("商户名称已存在,请重新编辑!");    	}    	queryMap.clear();    	queryMap.put("not_id", model.getId());    	queryMap.put("sysFlag", "1");    	queryMap.put("nameEq", model.getName());    	queryList = getDao().list(queryMap);    	if(CollectionUtils.isNotEmpty(queryList)) {            throw new BusinessException("商户编号已存在,请重新编辑!");    	}    	queryMap.clear();    	if(MyStringUtil.isNotBlank(model.getId())) {        	queryMap.put("sysFlag", "1");        	queryMap.put("c1", "1");        	queryMap.put("tenants_pid", model.getId());        	List<SecUserEntity> queryUserList = secUserService.list(queryMap);        	if(CollectionUtils.isNotEmpty(queryUserList)) {            	queryMap.clear();            	queryMap.put("not_id", queryUserList.get(0).getId());        	}    	}    	queryMap.put("sysFlag", "1");    	queryMap.put("usernameEq", model.getUsername());    	List<SecUserEntity> queryUserList = secUserService.list(queryMap);    	if(CollectionUtils.isNotEmpty(queryUserList)) {            throw new BusinessException("管理员用户名已存在,请重新编辑!");    	}    	    	SecTenantsEntity saveBean = new SecTenantsEntity();		saveBean.setName(model.getName());		saveBean.setCode(model.getCode());		saveBean.setDescribe(model.getDescribe());		saveBean.setParent_pid(model.getTenants_pid());		saveBean.setLevel(level);		saveBean.setC1(model.getC1());		saveBean.setC2(model.getC2());		saveBean.setC3(model.getC3());		saveBean.setC4(model.getC4());		saveBean.setC5(model.getC5());    	if(StringUtils.isBlank(model.getId())) {    		saveBean.setStatus(Constant.USERSTATUS1);    		super.save(saveBean);			String tenants_pid = saveBean.getId();			    		// 新增管理员账号        	SecUserEntity user = new SecUserEntity();    		String salt = UuidUtil.get32UUID();    		user.setUsername(model.getUsername());    		user.setNickname(model.getName());    		user.setSalt(salt);    		user.setPassword(MD5Utils.getSaltMD5("123456", salt));    		user.setStatus(Constant.USERSTATUS1);    		user.setTenants_pid(tenants_pid);    		user.setC1("1");// 是否为管理员    		secUserService.save(user);    		    		// 新增对应机构角色    		queryMap.clear();    		queryMap.put("sysFlag", "1");    		queryMap.put("tenants_level", saveBean.getLevel());    		List<SecTenantsLevelRoleEntity> queryRoleRelList = secTenantsLevelRoleService.list(queryMap);    		if(CollectionUtils.isNotEmpty(queryRoleRelList)) {    			SecRoleEntity saveRole = null;    			for(SecTenantsLevelRoleEntity roleRel : queryRoleRelList) {    				saveRole = new SecRoleEntity();    				saveRole.setTenants_pid(tenants_pid);    				saveRole.setName(roleRel.getRole_name());    				saveRole.setCode(roleRel.getRole_code());    				saveRole.setDescribe(roleRel.getDescribe());    				saveRole.setTenants_level_pid(roleRel.getId());    				saveRole.setIs_system("1");    				secRoleService.save(saveRole);    			}    		}    	}else {    		saveBean.setId(model.getId());    		super.update(saveBean);    	}    	        return saveBean;    }    @Override    public Page<SecTenantsEntity> listSecTenants (int pageNum, int pageSize, Map<String, Object> parameter) {        PageHelper.startPage(pageNum, pageSize, pageNum == 0 ? false : true);        List<SecTenantsEntity> reuslt = getDao().listSecTenants(parameter);        Page<SecTenantsEntity> page = new Page<>(reuslt);        return page;    }    @Override    public SecTenantsEntity saveSecTenantsStatus (SecTenantsEntity model) {    	if(null == model) {            throw new BusinessException("保存对象不能为空!");    	}    	if(StringUtils.isBlank(model.getId())) {            throw new BusinessException("商户ID不能为空!");    	}    	    	if(StringUtils.isBlank(model.getStatus())) {            throw new BusinessException("商户状态不能为空!");    	}    	    	SecTenantsEntity queryBean = getDao().get(model.getId());    	if(null == queryBean) {            throw new BusinessException("用户查询错误!");    	}    	SecTenantsEntity saveBean = new SecTenantsEntity();    	saveBean.setId(model.getId());    	saveBean.setStatus(model.getStatus());    	super.update(saveBean);        return model;    }    @Override    public SecTenantsEntity getParentByLevel(Map<String, Object> parameter) {        if (parameter.isEmpty()) {            throw new BusinessException("传入对象parameter不能为空");        }        return getDao().getParentByLevel(parameter);    }    }