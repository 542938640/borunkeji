package com.taro.service.pub.impl;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import org.apache.commons.collections4.CollectionUtils;import org.apache.commons.lang3.StringUtils;import org.apache.commons.lang3.time.DateFormatUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.taro.constants.Constant;import com.taro.dao.pub.PubDicDao;import com.taro.entity.pub.PubDicEntity;import com.taro.exception.BusinessException;import com.taro.service.AbstractService;import com.taro.service.pub.PubDicService;import com.taro.utils.Utility;/** *<p>Title:PubDicServiceImpl.java</p> *<p>Description:基础数据实例ServiceImpl</p> *@author 张宇唯 *@version 1.0 *@Automatically generate by Coder in 2019-07-31 10:57 */@Servicepublic class PubDicServiceImpl extends AbstractService<PubDicEntity> implements PubDicService{	@Autowired	private PubDicDao pubDicDao;    @Override    protected PubDicDao getDao () {        return pubDicDao;    }    @Override    public List<PubDicEntity> listRelation (Map<String, Object> parameter) {    	//base_code必传    	if(null == parameter) {            throw new BusinessException("查询保存对象不能为空!");    	}    	if(!parameter.containsKey("parentbase_pid")) {            throw new BusinessException("parentbase_pid不能为空!");    	}    	if(!parameter.containsKey("structure_pid")) {            throw new BusinessException("structure_pid不能为空!");    	}        List<PubDicEntity> reuslt = getDao().listRelation(parameter);        return reuslt;    }        @Override    public List<PubDicEntity> listByBase (Map<String, Object> parameter) {    	//base_code必传    	if(null == parameter || (!parameter.containsKey("base_code") && !parameter.containsKey("base_pid"))) {    		return null;    	}        List<PubDicEntity> reuslt = getDao().listByBase(parameter);        return reuslt;    }        @Override    public PubDicEntity savePubDic (PubDicEntity model) {    	if(null == model) {            throw new BusinessException("保存对象不能为空!");    	}    	    	Map<String, Object> queryMap = new HashMap<String, Object>();    	queryMap.put("not_id", model.getId());    	queryMap.put("sysFlag", "1");    	queryMap.put("codeEq", model.getCode());    	List<PubDicEntity> queryList = getDao().list(queryMap);    	if(CollectionUtils.isNotEmpty(queryList)) {            throw new BusinessException("编码[" + model.getCode() + "]已存在,请重新编辑!");    	}    	    	if(StringUtils.isBlank(model.getId())) {    		super.save(model);    	}else {    		super.update(model);    	}    	        return model;    }    @Override    public int deleteAllByBasePid(String ids) {        //校验参数        Utility.raiseIfWrong(ids, "ids不能为空");        String[] pids = ids.split(Constant.COMMA);        Map<String, Object> parameter = new HashMap<String, Object>();        parameter.put("ids", pids);        String currentDate = DateFormatUtils.format(new Date(), Constant.DF_DATE_YYYYMMDDHHMMSS);        parameter.put("lastModifiedTime", currentDate);//        Subject subject = SecurityUtils.getSubject();//        if (subject.isAuthenticated()) {//            String userId = SecurityMyUtils.getUserId();//            if (userId != null) {//                parameter.put("lastModifier", userId);//            }//        }        return getDao().deleteAllByBasePid(parameter);    }}