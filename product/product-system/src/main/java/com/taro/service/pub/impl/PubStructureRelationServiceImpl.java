package com.taro.service.pub.impl;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import org.apache.commons.collections4.CollectionUtils;import org.apache.commons.lang3.StringUtils;import org.apache.commons.lang3.time.DateFormatUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.google.common.collect.Lists;import com.google.common.collect.Maps;import com.taro.constants.Constant;import com.taro.dao.pub.PubStructureRelationDao;import com.taro.entity.pub.PubStructureEntity;import com.taro.entity.pub.PubStructureRelationEntity;import com.taro.exception.BusinessException;import com.taro.service.AbstractService;import com.taro.service.pub.PubStructureRelationService;import com.taro.service.pub.PubStructureService;import com.taro.utils.SecurityMyUtils;import com.taro.utils.Utility;/** *<p>Title:PubStructureRelationServiceImpl.java</p> *<p>Description:结构关系ServiceImpl</p> *@author 张宇唯 *@version 1.0 *@Automatically generate by Coder in 2019-07-31 10:56 */@Servicepublic class PubStructureRelationServiceImpl extends AbstractService<PubStructureRelationEntity> implements PubStructureRelationService{	@Autowired	private PubStructureRelationDao pubStructureRelationDao;	@Autowired	private PubStructureService pubStructureService;	    @Override    protected PubStructureRelationDao getDao () {        return pubStructureRelationDao;    }        @Override    public List<PubStructureRelationEntity> listMenu (Map<String, Object> parameter) {    	if(null == parameter) {    		parameter = Maps.newHashMap();    		parameter.put("tenants_pid", SecurityMyUtils.getTenantsId());    	}    	List<PubStructureRelationEntity> treeList = new ArrayList<>();    	//根节点    	PubStructureRelationEntity rootNode = new PubStructureRelationEntity();    	rootNode.setId("-1");    	rootNode.setChilddic_pid("-1");    	rootNode.setChilddic_name("节点维护根");    	rootNode.setChildbase_pid("-1");    	rootNode.setChildbase_name("节点维护根");        treeList.add(rootNode);    	        List<PubStructureRelationEntity> nodeList = getDao().listMenu(parameter);        if(CollectionUtils.isNotEmpty(nodeList)) {        	//声明一个map，用来过滤已操作过的数据            Map<String,String> map = Maps.newHashMapWithExpectedSize(nodeList.size());            treeList.forEach(root -> getChild(root, nodeList, map));//传递根对象和一个空map        }        return treeList;    }        @Override    public List<PubStructureRelationEntity> listTree (Map<String, Object> parameter) {    	if(null == parameter || !parameter.containsKey("structure_pid")) {    		return null;    	}    	    	String structure_pid = String.valueOf(parameter.get("structure_pid"));    	PubStructureEntity pubStructureEntity = pubStructureService.get(structure_pid);    	if(null == pubStructureEntity) {            throw new BusinessException("对象查询错误！");    	}    	List<PubStructureRelationEntity> treeList = new ArrayList<PubStructureRelationEntity>();    	//根节点    	PubStructureRelationEntity rootNode = new PubStructureRelationEntity();    	rootNode.setId("-1");    	rootNode.setChilddic_pid("-1");    	rootNode.setChilddic_name("节点维护根");    	rootNode.setChildbase_pid("-1");    	rootNode.setChildbase_name("节点维护根");        treeList.add(rootNode);    	    	parameter.put("sysFlag", "1");        List<PubStructureRelationEntity> nodeList = getDao().list(parameter);        if(CollectionUtils.isNotEmpty(nodeList)) {        	//声明一个map，用来过滤已操作过的数据            Map<String,String> map = Maps.newHashMapWithExpectedSize(nodeList.size());            treeList.forEach(root -> getChild(root, nodeList, map));//传递根对象和一个空map        }        return treeList;    }    private void getChild(PubStructureRelationEntity rootNode, List<PubStructureRelationEntity> nodeList, Map<String,String> map){        List<PubStructureRelationEntity> childList = Lists.newArrayList();        nodeList.stream()                .filter(node -> !map.containsKey(node.getId()))//节点id                .filter(node -> node.getParentdic_pid().equals(rootNode.getChilddic_pid()))//子节点的父id==根节点的子id 继续循环                .forEach(node -> {                    map.put(node.getId(), node.getId());//节点id                    getChild(node, nodeList, map);//递归调用                    childList.add(node);                });        rootNode.setChildren(childList);    }        @Override    public PubStructureRelationEntity savePubStructureRelation (PubStructureRelationEntity model) {    	if(null == model) {            throw new BusinessException("保存对象不能为空！");    	}    	if(CollectionUtils.isNotEmpty(model.getRelationList())) {    		for(PubStructureRelationEntity relation : model.getRelationList()) {    	    	if(StringUtils.isBlank(relation.getId())) {    	    		super.save(relation);    	    	}else {    	    		super.update(relation);    	    	}    		}    	}    	        return model;    }        @Override    public int deleteAllByStructurePid(String ids){        //校验参数        Utility.raiseIfWrong(ids, "ids不能为空！");        String[] pids = ids.split(Constant.COMMA);        Map<String, Object> parameter = new HashMap<String, Object>();        parameter.put("ids", pids);        String currentDate = DateFormatUtils.format(new Date(), Constant.DF_DATE_YYYYMMDDHHMMSS);        parameter.put("lastModifiedTime", currentDate);//        Subject subject = SecurityUtils.getSubject();//        if (subject.isAuthenticated()) {//            String userId = SecurityMyUtils.getUserId();//            if (userId != null) {//                parameter.put("lastModifier", userId);//            }//        }        return getDao().deleteAllByStructurePid(parameter);    }    @Override    public int deleteAllByStructureDetailPid(String ids){        //校验参数        Utility.raiseIfWrong(ids, "ids不能为空");        String[] pids = ids.split(Constant.COMMA);        Map<String, Object> parameter = new HashMap<String, Object>();        parameter.put("ids", pids);        String currentDate = DateFormatUtils.format(new Date(), Constant.DF_DATE_YYYYMMDDHHMMSS);        parameter.put("lastModifiedTime", currentDate);//        Subject subject = SecurityUtils.getSubject();//        if (subject.isAuthenticated()) {//            String userId = SecurityMyUtils.getUserId();//            if (userId != null) {//                parameter.put("lastModifier", userId);//            }//        }        return getDao().deleteAllByStructurePid(parameter);    }}