package com.taro.controller.sec;import java.util.List;import java.util.Map;import java.util.Set;import javax.servlet.http.HttpServletRequest;import javax.validation.ConstraintViolation;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import com.taro.common.DataSet;import com.taro.common.DataSetObject;import com.taro.constants.Constant;import com.taro.controller.AbstractController;import com.taro.entity.sec.SecRoleEntity;import com.taro.exception.BusinessException;import com.taro.service.sec.SecRoleService;import io.swagger.annotations.ApiImplicitParam;import io.swagger.annotations.ApiImplicitParams;import io.swagger.annotations.ApiOperation;/** *<p>Title:SecRoleController.java</p> *<p>Description:角色表 Action</p> *@author 张宇唯 *@version 1.0 *@Automatically generate by Coder in 2019-08-16 15:33 */@RestController@RequestMapping(value="/secRole")public class SecRoleController extends AbstractController<SecRoleEntity>{	public final static String MODULE = "角色";	public final static String ENTITY = "SecRoleEntity";		@Autowired	private SecRoleService secRoleService;		@Override    protected SecRoleService getService () {        return secRoleService;    }	@Override    public String getModule() {		return MODULE;	}	@ApiOperation(value = "获取角色树信息", notes = "获取角色树信息")	@ApiImplicitParams({		@ApiImplicitParam (name = "parameter", value = "查询条件参数", required = true, dataType = "Map<String, Object>", paramType = "query")	})	@RequestMapping(value = "/listTree",produces = Constant.JSON_UTF_8,method = RequestMethod.GET)	public String listTree(@RequestParam Map<String, Object> parameter){		listBefore(parameter);		List<SecRoleEntity> result = getService().listTree(parameter);		return new DataSet<SecRoleEntity>(result).toJson();	}	@ApiOperation(value = "根据实例id保存详情", notes = "根据实例id保存详情")	@ApiImplicitParams({		@ApiImplicitParam (name = "modelSecRole", value = "保存实体", required = true, dataType = "T", paramType = "query")	})	@RequestMapping(value = "/saveSecRole",consumes = Constant.JSON_UTF_8,method = RequestMethod.POST)	public String saveSecRole(@RequestBody SecRoleEntity model) {				Set<ConstraintViolation<SecRoleEntity>> constraintViolations = validator.validate(model);		if (!constraintViolations.isEmpty()) {			throw new BusinessException(constraintViolations.iterator().next().getMessage());		}		createBefore(model);		getService().saveSecRole(model);		return new DataSetObject<SecRoleEntity>(model).toJson(ignoreAttr.get(Constant.IGNORE_ATTR_CREATE));	}	@ApiOperation(value = "获取角色树信息", notes = "获取角色树信息")	@ApiImplicitParams({		@ApiImplicitParam (name = "parameter", value = "查询条件参数", required = true, dataType = "Map<String, Object>", paramType = "query")	})	@RequestMapping(value = "/listTreeByAdmin",produces = Constant.JSON_UTF_8,method = RequestMethod.GET)	public String listTreeByAdmin(HttpServletRequest request, @RequestParam Map<String, Object> parameter){		listBefore(parameter);		List<SecRoleEntity> result = getService().listTree(parameter);		return new DataSet<SecRoleEntity>(result).toJson();	}	@ApiOperation(value = "根据实例id保存详情", notes = "根据实例id保存详情")	@ApiImplicitParams({		@ApiImplicitParam (name = "modelSecRole", value = "保存实体", required = true, dataType = "T", paramType = "query")	})	@RequestMapping(value = "/saveSecRoleByAdmin",consumes = Constant.JSON_UTF_8,method = RequestMethod.POST)	public String saveSecRoleByAdmin(HttpServletRequest request, @RequestBody SecRoleEntity model) {				Set<ConstraintViolation<SecRoleEntity>> constraintViolations = validator.validate(model);		if (!constraintViolations.isEmpty()) {			throw new BusinessException(constraintViolations.iterator().next().getMessage());		}		createBefore(model);		getService().saveSecRole(model);		return new DataSetObject<SecRoleEntity>(model).toJson(ignoreAttr.get(Constant.IGNORE_ATTR_CREATE));	}}