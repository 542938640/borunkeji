package com.taro.controller.pub;import java.util.List;import java.util.Map;import java.util.Set;import javax.validation.ConstraintViolation;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import com.taro.common.DataSet;import com.taro.common.DataSetObject;import com.taro.common.Message;import com.taro.constants.Constant;import com.taro.controller.AbstractController;import com.taro.entity.pub.PubStructureDetailEntity;import com.taro.exception.BusinessException;import com.taro.service.pub.PubStructureDetailService;import io.swagger.annotations.Api;import io.swagger.annotations.ApiImplicitParam;import io.swagger.annotations.ApiImplicitParams;import io.swagger.annotations.ApiOperation;/** *<p>Title:PubStructureDetailController.java</p> *<p>Description:结构节点关系信息 Action</p> *@author 张宇唯 *@version 1.0 *@Automatically generate by Coder in 2019-07-31 10:56 */@Api(tags = "结构节点关系信息")@RestController@RequestMapping(value="/pubStructureDetail")public class PubStructureDetailController extends AbstractController<PubStructureDetailEntity>{	public final static String MODULE = "结构节点关系";	public final static String ENTITY = "PubStructureDetailEntity";		@Autowired	private PubStructureDetailService pubStructureDetailService;		@Override    protected PubStructureDetailService getService () {        return pubStructureDetailService;    }	@Override    public String getModule() {		return MODULE;	}	@ApiOperation(value = "获取列表信息", notes = "获取列表信息")	@ApiImplicitParams({		@ApiImplicitParam (name = "parameter", value = "查询条件参数", required = true, dataType = "Map<String, Object>", paramType = "query")	})	@RequestMapping(value = "/listNotPage",produces = Constant.JSON_UTF_8,method = RequestMethod.GET)	public String listNotPage(@RequestParam Map<String, Object> parameter){		listBefore(parameter);		List<PubStructureDetailEntity> result = getService().list(parameter);		return new DataSet<PubStructureDetailEntity>(result).toJson();	}		@ApiOperation(value = "根据structureId获取树信息", notes = "根据structureId获取树信息")	@ApiImplicitParams({		@ApiImplicitParam (name = "parameter", value = "查询条件参数", required = true, dataType = "Map<String, Object>", paramType = "query")	})	@RequestMapping(value = "/listTree",produces = Constant.JSON_UTF_8,method = RequestMethod.GET)	public String listTree(@RequestParam Map<String, Object> parameter){		listBefore(parameter);		List<PubStructureDetailEntity> result = getService().listTree(parameter);		return new DataSet<PubStructureDetailEntity>(result).toJson();	}	@ApiOperation(value = "根据实例id保存详情", notes = "根据实例id保存详情")	@ApiImplicitParams({		@ApiImplicitParam (name = "model", value = "保存实体", required = true, dataType = "T", paramType = "query")	})	@RequestMapping(value = "/savePubStructureDetail",consumes = Constant.JSON_UTF_8,method = RequestMethod.POST)	public String savePubStructureDetail(@RequestBody PubStructureDetailEntity model) {				Set<ConstraintViolation<PubStructureDetailEntity>> constraintViolations = validator.validate(model);		if (!constraintViolations.isEmpty()) {			throw new BusinessException(constraintViolations.iterator().next().getMessage());		}		createBefore(model);		getService().savePubStructureDetail(model);		return new DataSetObject<PubStructureDetailEntity>(model).toJson(ignoreAttr.get(Constant.IGNORE_ATTR_CREATE));	}	@ApiOperation(value = "根据实例ids删除多个实例", notes = "根据实例ids删除多个实例")	@ApiImplicitParam(name = "ids", value = "实例ids", required = true, dataType = "String", paramType = "query")	@RequestMapping(value = "/deletePubStructureDetail",method = RequestMethod.GET)	public String deletePubStructureDetail(@RequestParam String ids) {		deleteBefore(ids);				int deleteRowCount=getService().deletePubStructureDetail(ids);		return new Message(deleteRowCount>0?Constant.STATUS_OK:Constant.STATUS_ERROR_GENERAL,"删除"+deleteRowCount+"条记录").toJson();	}}