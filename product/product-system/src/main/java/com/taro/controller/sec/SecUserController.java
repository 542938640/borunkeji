package com.taro.controller.sec;import java.util.List;import java.util.Map;import java.util.Set;import javax.servlet.http.HttpServletRequest;import javax.validation.ConstraintViolation;import org.apache.shiro.authz.annotation.RequiresAuthentication;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import com.taro.common.DataSet;import com.taro.common.DataSetObject;import com.taro.common.Message;import com.taro.common.Page;import com.taro.constants.Constant;import com.taro.controller.AbstractController;import com.taro.entity.pub.PubDicEntity;import com.taro.entity.pub.PubStructureRelationEntity;import com.taro.entity.sec.SecUserEntity;import com.taro.exception.BusinessException;import com.taro.service.sec.SecUserService;import io.swagger.annotations.ApiImplicitParam;import io.swagger.annotations.ApiImplicitParams;import io.swagger.annotations.ApiOperation;/** *<p>Title:SecUserController.java</p> *<p>Description:用户表 Action</p> *@author 张宇唯 *@version 1.0 *@Automatically generate by Coder in 2019-08-16 15:33 */@RestController@RequestMapping(value="/secUser")public class SecUserController extends AbstractController<SecUserEntity>{	public final static String MODULE = "用户";	public final static String ENTITY = "SecUserEntity";		@Autowired	private SecUserService secUserService;		@Override    protected SecUserService getService () {        return secUserService;    }	@Override    public String getModule() {		return MODULE;	}	@RequiresAuthentication	@ApiOperation(value = "获取菜单", notes = "获取菜单")	@ApiImplicitParams({		@ApiImplicitParam (name = "parameter", value = "查询条件参数", required = true, dataType = "Map<String, Object>", paramType = "query")	})	@RequestMapping(value = "/listMenu",produces = Constant.JSON_UTF_8,method = RequestMethod.GET)	public String listMenu(@RequestParam Map<String, Object> parameter){        		listBefore(parameter);		List<PubStructureRelationEntity> result = getService().listMenu(parameter);		return new DataSet<PubStructureRelationEntity>(result).toJson();	}	@ApiOperation(value = "保存菜单", notes = "保存菜单")	@ApiImplicitParams({		@ApiImplicitParam (name = "model", value = "保存实体", required = true, dataType = "T", paramType = "query")	})	@RequestMapping(value = "/saveMenu",produces = Constant.JSON_UTF_8,consumes = Constant.JSON_UTF_8,method = RequestMethod.POST)	public String saveMenu(@RequestBody PubDicEntity model) {		getService().saveMenu(model);		return new DataSetObject<PubDicEntity>(model).toJson(ignoreAttr.get(Constant.IGNORE_ATTR_CREATE));	}	@ApiOperation(value = "删除菜单", notes = "删除菜单")	@ApiImplicitParam(name = "ids", value = "实例ids", required = true, dataType = "String", paramType = "query")	@RequestMapping(value = "/deleteMenu",produces = Constant.JSON_UTF_8,method = RequestMethod.GET)	public String deleteMenu(String structureId, String structureRelationIds, String dicIds) {		int deleteRowCount=getService().deleteMenu(structureId, structureRelationIds, dicIds);		return new Message(deleteRowCount>0?Constant.STATUS_OK:Constant.STATUS_ERROR_GENERAL,"删除"+deleteRowCount+"条记录").toJson();	}		@ApiOperation(value = "获取列表数据", notes = "获取列表数据")	@ApiImplicitParams({		@ApiImplicitParam (name = "page", value = "分页参数(页数)", required = false, dataType = "Number", paramType = "query"),		@ApiImplicitParam (name = "rows", value = "分页参数(每页个条数)", required = false, dataType = "Number", paramType = "query"),		@ApiImplicitParam (name = "parameter", value = "查询条件参数", required = true, dataType = "Map<String, Object>", paramType = "query")	})	@RequestMapping(value = "/listSecUserByRole",produces = Constant.JSON_UTF_8,method = RequestMethod.GET)	public String listSecUserByRole(@RequestParam(value = Constant.PAGE_NUM, defaultValue = Constant.PAGE_DEFAULT_VALUE) int pageNum,			@RequestParam(value = Constant.PAGE_SIZE, defaultValue = Constant.PAGE_SIZE_DEFAULT_VALUE) int pageSize,			@RequestParam Map<String, Object> parameter){		listBefore(parameter);		Page<SecUserEntity> result=getService().listSecUserByRole(pageNum,pageSize,parameter);		return result.toJson(ignoreAttr.get(Constant.IGNORE_ATTR_LIST));	}	@ApiOperation(value = "获取列表数据", notes = "获取列表数据")	@ApiImplicitParams({		@ApiImplicitParam (name = "page", value = "分页参数(页数)", required = false, dataType = "Number", paramType = "query"),		@ApiImplicitParam (name = "rows", value = "分页参数(每页个条数)", required = false, dataType = "Number", paramType = "query"),		@ApiImplicitParam (name = "parameter", value = "查询条件参数", required = true, dataType = "Map<String, Object>", paramType = "query")	})	@RequestMapping(value = "/listSecUser",produces = Constant.JSON_UTF_8,method = RequestMethod.GET)	public String listSecUser(@RequestParam(value = Constant.PAGE_NUM, defaultValue = Constant.PAGE_DEFAULT_VALUE) int pageNum,			@RequestParam(value = Constant.PAGE_SIZE, defaultValue = Constant.PAGE_SIZE_DEFAULT_VALUE) int pageSize,			@RequestParam Map<String, Object> parameter){		listBefore(parameter);		Page<SecUserEntity> result=getService().listSecUser(pageNum,pageSize,parameter);		return result.toJson(ignoreAttr.get(Constant.IGNORE_ATTR_LIST));	}//	@RequiresPermissions("sec:user:add")	@ApiOperation(value = "保存用户信息", notes = "保存用户信息")	@ApiImplicitParams({		@ApiImplicitParam (name = "model", value = "保存实体", required = true, dataType = "T", paramType = "query")	})	@RequestMapping(value = "/saveSecUser",produces = Constant.JSON_UTF_8,consumes = Constant.JSON_UTF_8,method = RequestMethod.POST)	public String saveSecUser(@RequestBody SecUserEntity model) {				Set<ConstraintViolation<SecUserEntity>> constraintViolations = validator.validate(model);		if (!constraintViolations.isEmpty()) {			throw new BusinessException(constraintViolations.iterator().next().getMessage());		}		createBefore(model);		getService().saveSecUser(model);		return new DataSetObject<SecUserEntity>(model).toJson(ignoreAttr.get(Constant.IGNORE_ATTR_CREATE));	}	@ApiOperation(value = "修改用户状态信息", notes = "修改用户状态信息")	@ApiImplicitParams({		@ApiImplicitParam (name = "model", value = "保存实体", required = true, dataType = "T", paramType = "query")	})	@RequestMapping(value = "/saveSecUserStatus",produces = Constant.JSON_UTF_8,consumes = Constant.JSON_UTF_8,method = RequestMethod.POST)	public String saveSecUserStatus(@RequestBody SecUserEntity model) {		getService().saveSecUserStatus(model);		return new DataSetObject<SecUserEntity>(model).toJson(ignoreAttr.get(Constant.IGNORE_ATTR_CREATE));	}	@ApiOperation(value = "修改用户密码", notes = "修改用户密码")	@ApiImplicitParams({		@ApiImplicitParam (name = "model", value = "保存实体", required = true, dataType = "T", paramType = "query")	})	@RequestMapping(value = "/saveSecUserPassword",produces = Constant.JSON_UTF_8,consumes = Constant.JSON_UTF_8,method = RequestMethod.POST)	public String saveSecUserPassword(@RequestBody SecUserEntity model) {		getService().saveSecUserPassword(model);		return new DataSetObject<SecUserEntity>(model).toJson(ignoreAttr.get(Constant.IGNORE_ATTR_CREATE));	}	@ApiOperation(value = "获取列表数据", notes = "获取列表数据")	@ApiImplicitParams({		@ApiImplicitParam (name = "page", value = "分页参数(页数)", required = false, dataType = "Number", paramType = "query"),		@ApiImplicitParam (name = "rows", value = "分页参数(每页个条数)", required = false, dataType = "Number", paramType = "query"),		@ApiImplicitParam (name = "parameter", value = "查询条件参数", required = true, dataType = "Map<String, Object>", paramType = "query")	})	@RequestMapping(value = "/listSecUserByAdmin",produces = Constant.JSON_UTF_8,method = RequestMethod.GET)	public String listSecUserByAdmin(HttpServletRequest request, 			@RequestParam(value = Constant.PAGE_NUM, defaultValue = Constant.PAGE_DEFAULT_VALUE) int pageNum,			@RequestParam(value = Constant.PAGE_SIZE, defaultValue = Constant.PAGE_SIZE_DEFAULT_VALUE) int pageSize,			@RequestParam Map<String, Object> parameter){		listBefore(parameter);		Page<SecUserEntity> result=getService().listSecUser(pageNum,pageSize,parameter);		return result.toJson(ignoreAttr.get(Constant.IGNORE_ATTR_LIST));	}		@ApiOperation(value = "保存用户信息", notes = "保存用户信息")	@ApiImplicitParams({		@ApiImplicitParam (name = "model", value = "保存实体", required = true, dataType = "T", paramType = "query")	})	@RequestMapping(value = "/saveSecUserByAdmin",produces = Constant.JSON_UTF_8,consumes = Constant.JSON_UTF_8,method = RequestMethod.POST)	public String saveSecUserByAdmin(HttpServletRequest request, @RequestBody SecUserEntity model) {				Set<ConstraintViolation<SecUserEntity>> constraintViolations = validator.validate(model);		if (!constraintViolations.isEmpty()) {			throw new BusinessException(constraintViolations.iterator().next().getMessage());		}		createBefore(model);		getService().saveSecUser(model);		return new DataSetObject<SecUserEntity>(model).toJson(ignoreAttr.get(Constant.IGNORE_ATTR_CREATE));	}		@ApiOperation(value = "获取列表数据", notes = "获取列表数据")	@ApiImplicitParams({		@ApiImplicitParam (name = "page", value = "分页参数(页数)", required = false, dataType = "Number", paramType = "query"),		@ApiImplicitParam (name = "rows", value = "分页参数(每页个条数)", required = false, dataType = "Number", paramType = "query"),		@ApiImplicitParam (name = "parameter", value = "查询条件参数", required = true, dataType = "Map<String, Object>", paramType = "query")	})	@RequestMapping(value = "/listSecUserByRoleAdmin",produces = Constant.JSON_UTF_8,method = RequestMethod.GET)	public String listSecUserByRoleAdmin(HttpServletRequest request, 			@RequestParam(value = Constant.PAGE_NUM, defaultValue = Constant.PAGE_DEFAULT_VALUE) int pageNum,			@RequestParam(value = Constant.PAGE_SIZE, defaultValue = Constant.PAGE_SIZE_DEFAULT_VALUE) int pageSize,			@RequestParam Map<String, Object> parameter){		listBefore(parameter);		Page<SecUserEntity> result=getService().listSecUserByRole(pageNum, pageSize, parameter);		return result.toJson(ignoreAttr.get(Constant.IGNORE_ATTR_LIST));	}}