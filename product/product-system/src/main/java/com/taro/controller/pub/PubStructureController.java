package com.taro.controller.pub;import java.util.List;import java.util.Map;import java.util.Set;import javax.validation.ConstraintViolation;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import com.taro.common.DataSet;import com.taro.common.DataSetObject;import com.taro.common.Message;import com.taro.constants.Constant;import com.taro.controller.AbstractController;import com.taro.entity.pub.PubBaseEntity;import com.taro.entity.pub.PubStructureEntity;import com.taro.exception.BusinessException;import com.taro.service.pub.PubStructureService;import io.swagger.annotations.Api;import io.swagger.annotations.ApiImplicitParam;import io.swagger.annotations.ApiImplicitParams;import io.swagger.annotations.ApiOperation;/** *<p>Title:PubStructureController.java</p> *<p>Description:结构定义 Action</p> *@author 张宇唯 *@version 1.0 *@Automatically generate by Coder in 2019-07-31 10:57 */@Api(tags = "结构定义")@RestController@RequestMapping(value="/pubStructure")public class PubStructureController extends AbstractController<PubStructureEntity>{	public final static String MODULE = "结构定义";	public final static String ENTITY = "PubStructureEntity";		@Autowired	private PubStructureService pubStructureService;		@Override    protected PubStructureService getService () {        return pubStructureService;    }	@Override    public String getModule() {		return MODULE;	}	@ApiOperation(value = "根据实例id获取详情", notes = "根据实例id获取详情")	@ApiImplicitParams({		@ApiImplicitParam (name = "id", value = "实例id", required = true, dataType = "String", paramType = "query")	})	@RequestMapping(value = "/listBaseAndAttribute", produces = Constant.JSON_UTF_8,method = RequestMethod.GET)	public String listBaseAndAttribute(@RequestParam Map<String, Object> parameter) {		List<PubBaseEntity> list = getService().listBaseAndAttribute(parameter);		return new DataSet<PubBaseEntity>(list).toJson();	}		@ApiOperation(value = "根据实例id获取详情", notes = "根据实例id获取详情")	@ApiImplicitParams({		@ApiImplicitParam (name = "id", value = "实例id", required = true, dataType = "String", paramType = "query")	})	@RequestMapping(value = "/getPubStructure/{id}", produces = Constant.JSON_UTF_8,method = RequestMethod.GET)	public String getPubStructure(@PathVariable("id") String id) {		getBefore(id);				PubStructureEntity model = getService().getPubStructure(id);		return new DataSetObject<PubStructureEntity>(model).toJson(ignoreAttr.get(Constant.IGNORE_ATTR_GET));	}	@ApiOperation(value = "获取列表信息", notes = "获取列表信息")	@ApiImplicitParams({		@ApiImplicitParam (name = "parameter", value = "查询条件参数", required = true, dataType = "Map<String, Object>", paramType = "query")	})	@RequestMapping(value = "/listNotPage",produces = Constant.JSON_UTF_8,method = RequestMethod.GET)	public String listNotPage(@RequestParam Map<String, Object> parameter){		listBefore(parameter);		List<PubStructureEntity> result = getService().listNotPage(parameter);		return new DataSet<PubStructureEntity>(result).toJson();	}	@ApiOperation(value = "根据实例id保存详情", notes = "根据实例id保存详情")	@ApiImplicitParams({		@ApiImplicitParam (name = "model", value = "保存实体", required = true, dataType = "T", paramType = "query")	})	@RequestMapping(value = "/savePubStructure",consumes = Constant.JSON_UTF_8,method = RequestMethod.POST)	public String savePubStructure(@RequestBody PubStructureEntity model) {				Set<ConstraintViolation<PubStructureEntity>> constraintViolations = validator.validate(model);		if (!constraintViolations.isEmpty()) {			throw new BusinessException(constraintViolations.iterator().next().getMessage());		}		createBefore(model);		getService().savePubStructure(model);		return new DataSetObject<PubStructureEntity>(model).toJson(ignoreAttr.get(Constant.IGNORE_ATTR_CREATE));	}	@ApiOperation(value = "根据实例ids删除多个实例", notes = "根据实例ids删除多个实例")	@ApiImplicitParam(name = "ids", value = "实例ids", required = true, dataType = "String", paramType = "query")	@RequestMapping(value = "/deletePubStructure",method = RequestMethod.GET)	public String deletePubStructure(@RequestParam String ids) {		deleteBefore(ids);				int deleteRowCount=getService().deletePubStructure(ids);		return new Message(deleteRowCount>0?Constant.STATUS_OK:Constant.STATUS_ERROR_GENERAL,"删除"+deleteRowCount+"条记录").toJson();	}}