package com.taro.controller.pub;import java.util.List;import java.util.Map;import java.util.Set;import javax.validation.ConstraintViolation;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import com.taro.common.DataSet;import com.taro.common.DataSetObject;import com.taro.common.Message;import com.taro.constants.Constant;import com.taro.controller.AbstractController;import com.taro.entity.pub.PubBaseEntity;import com.taro.exception.BusinessException;import com.taro.log.annotation.LogAnnotation;import com.taro.service.pub.PubBaseService;import io.swagger.annotations.Api;import io.swagger.annotations.ApiImplicitParam;import io.swagger.annotations.ApiImplicitParams;import io.swagger.annotations.ApiOperation;/** *<p>Title:PubBaseController.java</p> *<p>Description:基础数据类型 Action</p> *@author 张宇唯 *@version 1.0 *@Automatically generate by Coder in 2019-07-31 10:57 */@Api(tags = "基础数据类型")@RestController@RequestMapping(value="/pubBase")public class PubBaseController extends AbstractController<PubBaseEntity>{	public final static String MODULE = "基础数据类型";	public final static String ENTITY = "PubBaseEntity";		@Autowired	private PubBaseService pubBaseService;		@Override    protected PubBaseService getService () {        return pubBaseService;    }		@Override    public String getModule() {		return MODULE;	}	@ApiOperation(value = "查询列表", notes = "查询列表")	@ApiImplicitParams({		@ApiImplicitParam (name = "parameter", value = "查询条件参数", required = true, dataType = "Map<String, Object>", paramType = "query")	})	@RequestMapping(value = "/listNotPage",produces = Constant.JSON_UTF_8,method = RequestMethod.GET)	public String listNotPage(@RequestParam Map<String, Object> parameter){		listBefore(parameter);		List<PubBaseEntity> result = getService().list(parameter);		return new DataSet<PubBaseEntity>(result).toJson();	}	@LogAnnotation(function = "获取树信息", type = Constant.LOG_QUERY, operate = "获取树信息")	@ApiOperation(value = "获取树信息", notes = "获取树信息")	@ApiImplicitParams({		@ApiImplicitParam (name = "parameter", value = "查询条件参数", required = true, dataType = "Map<String, Object>", paramType = "query")	})	@RequestMapping(value = "/listTree",produces = Constant.JSON_UTF_8,method = RequestMethod.GET)	public String listTree(@RequestParam Map<String, Object> parameter){		listBefore(parameter);		List<PubBaseEntity> result = getService().listTree(parameter);		return new DataSet<PubBaseEntity>(result).toJson();	}	@ApiOperation(value = "根据实例id保存详情", notes = "根据实例id保存详情")	@ApiImplicitParams({		@ApiImplicitParam (name = "model", value = "保存实体", required = true, dataType = "PubBaseEntity", paramType = "query")	})	@RequestMapping(value = "/savePubBase",consumes = Constant.JSON_UTF_8,method = RequestMethod.POST)	public String savePubBase(@RequestBody PubBaseEntity model) {				Set<ConstraintViolation<PubBaseEntity>> constraintViolations = validator.validate(model);		if (!constraintViolations.isEmpty()) {			throw new BusinessException(constraintViolations.iterator().next().getMessage());		}		createBefore(model);		getService().savePubBase(model);		return new DataSetObject<PubBaseEntity>(model).toJson(ignoreAttr.get(Constant.IGNORE_ATTR_CREATE));	}	@ApiOperation(value = "根据实例ids删除多个实例", notes = "根据实例ids删除多个实例")	@ApiImplicitParam(name = "ids", value = "实例ids", required = true, dataType = "String", paramType = "query")	@RequestMapping(value = "/deletePubBase",method = RequestMethod.GET)	public String deletePubBase(@RequestParam String ids) {		deleteBefore(ids);				int deleteRowCount=getService().deletePubBase(ids);		return new Message(deleteRowCount>0?Constant.STATUS_OK:Constant.STATUS_ERROR_GENERAL,"删除"+deleteRowCount+"条记录").toJson();	}}