package com.taro.controller.sec;import java.util.List;import java.util.Map;import java.util.Set;import javax.servlet.http.HttpServletRequest;import javax.validation.ConstraintViolation;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import com.taro.common.DataSet;import com.taro.common.DataSetObject;import com.taro.common.Page;import com.taro.constants.Constant;import com.taro.controller.AbstractController;import com.taro.entity.sec.SecTenantsEntity;import com.taro.exception.BusinessException;import com.taro.service.sec.SecTenantsService;import io.swagger.annotations.Api;import io.swagger.annotations.ApiImplicitParam;import io.swagger.annotations.ApiImplicitParams;import io.swagger.annotations.ApiOperation;/** *<p>Title:SecTenantsController.java</p> *<p>Description: Action</p> *@author 张宇唯 *@version 1.0 *@Automatically generate by Coder in 2020-10-11 22:31:42 */@Api(tags = "")@RestController@RequestMapping(value="/secTenants")public class SecTenantsController extends AbstractController<SecTenantsEntity> {	public final static String MODULE = "";	public final static String ENTITY = "SecTenantsEntity";		@Autowired	private SecTenantsService secTenantsService;		@Override    protected SecTenantsService getService () {        return secTenantsService;    }    	@Override    public String getModule() {		return MODULE;	}	@ApiOperation(value = "获取角色树信息", notes = "获取角色树信息")	@ApiImplicitParams({		@ApiImplicitParam (name = "parameter", value = "查询条件参数", required = true, dataType = "Map<String, Object>", paramType = "query")	})	@RequestMapping(value = "/listTreeById",produces = Constant.JSON_UTF_8,method = RequestMethod.GET)	public String listTreeById(@RequestParam Map<String, Object> parameter){		listBefore(parameter);		List<SecTenantsEntity> result = getService().listTreeById(parameter);		return new DataSet<SecTenantsEntity>(result).toJson();	}	@ApiOperation(value = "获取角色树信息", notes = "获取角色树信息")	@ApiImplicitParams({		@ApiImplicitParam (name = "parameter", value = "查询条件参数", required = true, dataType = "Map<String, Object>", paramType = "query")	})	@RequestMapping(value = "/listTree",produces = Constant.JSON_UTF_8,method = RequestMethod.GET)	public String listTree(@RequestParam Map<String, Object> parameter){		listBefore(parameter);		List<SecTenantsEntity> result = getService().listTree(parameter);		return new DataSet<SecTenantsEntity>(result).toJson();	}	@ApiOperation(value = "保存" + MODULE, notes = "保存" + MODULE)	@ApiImplicitParams({		@ApiImplicitParam (name = "model", value = "保存实体", required = true, dataType = ENTITY, paramType = "query")	})	@RequestMapping(value = "/saveSecTenants",consumes = Constant.JSON_UTF_8,method = RequestMethod.POST)	public String saveSecTenants(@RequestBody SecTenantsEntity model) {				Set<ConstraintViolation<SecTenantsEntity>> constraintViolations = validator.validate(model);		if (!constraintViolations.isEmpty()) {			throw new BusinessException(constraintViolations.iterator().next().getMessage());		}		createBefore(model);		getService().saveSecTenants(model);		return new DataSetObject<SecTenantsEntity>(model).toJson(ignoreAttr.get(Constant.IGNORE_ATTR_CREATE));	}		@ApiOperation(value = "获取列表数据", notes = "获取列表数据")	@ApiImplicitParams({		@ApiImplicitParam (name = "page", value = "分页参数(页数)", required = false, dataType = "Number", paramType = "query"),		@ApiImplicitParam (name = "rows", value = "分页参数(每页个条数)", required = false, dataType = "Number", paramType = "query"),		@ApiImplicitParam (name = "parameter", value = "查询条件参数", required = true, dataType = "Map<String, Object>", paramType = "query")	})	@RequestMapping(value = "/listSecTenants",produces = Constant.JSON_UTF_8,method = RequestMethod.GET)	public String listSecTenants(@RequestParam(value = Constant.PAGE_NUM, defaultValue = Constant.PAGE_DEFAULT_VALUE) int pageNum,			@RequestParam(value = Constant.PAGE_SIZE, defaultValue = Constant.PAGE_SIZE_DEFAULT_VALUE) int pageSize,			@RequestParam Map<String, Object> parameter){		listBefore(parameter);		Page<SecTenantsEntity> result = getService().listSecTenants(pageNum,pageSize,parameter);		return result.toJson(ignoreAttr.get(Constant.IGNORE_ATTR_LIST));	}	@ApiOperation(value = "获取列表数据", notes = "获取列表数据")	@ApiImplicitParams({		@ApiImplicitParam (name = "parameter", value = "查询条件参数", required = true, dataType = "Map<String, Object>", paramType = "query")	})	@RequestMapping(value = "/listNotPage",produces = Constant.JSON_UTF_8,method = RequestMethod.GET)	public String listNotPage(@RequestParam Map<String, Object> parameter){		listBefore(parameter);		List<SecTenantsEntity> result = getService().list(parameter);		return new DataSet<SecTenantsEntity>(result).toJson();	}	@ApiOperation(value = "修改用户状态信息", notes = "修改用户状态信息")	@ApiImplicitParams({		@ApiImplicitParam (name = "model", value = "保存实体", required = true, dataType = "T", paramType = "query")	})	@RequestMapping(value = "/saveSecTenantsStatus",consumes = Constant.JSON_UTF_8,method = RequestMethod.POST)	public String saveSecTenantsStatus(@RequestBody SecTenantsEntity model) {				Set<ConstraintViolation<SecTenantsEntity>> constraintViolations = validator.validate(model);		if (!constraintViolations.isEmpty()) {			throw new BusinessException(constraintViolations.iterator().next().getMessage());		}		createBefore(model);		getService().saveSecTenantsStatus(model);		return new DataSetObject<SecTenantsEntity>(model).toJson(ignoreAttr.get(Constant.IGNORE_ATTR_CREATE));	}		@ApiOperation(value = "获取列表数据", notes = "获取列表数据")	@ApiImplicitParams({		@ApiImplicitParam (name = "page", value = "分页参数(页数)", required = false, dataType = "Number", paramType = "query"),		@ApiImplicitParam (name = "rows", value = "分页参数(每页个条数)", required = false, dataType = "Number", paramType = "query"),		@ApiImplicitParam (name = "parameter", value = "查询条件参数", required = true, dataType = "Map<String, Object>", paramType = "query")	})	@RequestMapping(value = "/listSecTenantsByAdmin",produces = Constant.JSON_UTF_8,method = RequestMethod.GET)	public String listSecTenantsByAdmin(HttpServletRequest request, 			@RequestParam(value = Constant.PAGE_NUM, defaultValue = Constant.PAGE_DEFAULT_VALUE) int pageNum,			@RequestParam(value = Constant.PAGE_SIZE, defaultValue = Constant.PAGE_SIZE_DEFAULT_VALUE) int pageSize,			@RequestParam Map<String, Object> parameter){		listBefore(parameter);		Page<SecTenantsEntity> result = getService().listSecTenants(pageNum,pageSize,parameter);		return result.toJson(ignoreAttr.get(Constant.IGNORE_ATTR_LIST));	}	@ApiOperation(value = "保存" + MODULE, notes = "保存" + MODULE)	@ApiImplicitParams({		@ApiImplicitParam (name = "model", value = "保存实体", required = true, dataType = ENTITY, paramType = "query")	})	@RequestMapping(value = "/saveSecTenantsByAdmin",consumes = Constant.JSON_UTF_8,method = RequestMethod.POST)	public String saveSecTenantsByAdmin(HttpServletRequest request, @RequestBody SecTenantsEntity model) {				Set<ConstraintViolation<SecTenantsEntity>> constraintViolations = validator.validate(model);		if (!constraintViolations.isEmpty()) {			throw new BusinessException(constraintViolations.iterator().next().getMessage());		}		createBefore(model);		getService().saveSecTenants(model);		return new DataSetObject<SecTenantsEntity>(model).toJson(ignoreAttr.get(Constant.IGNORE_ATTR_CREATE));	}	@ApiOperation(value = "根据id和level获取指定父级详情", notes = "根据id和level获取指定父级详情")	@ApiImplicitParams({		@ApiImplicitParam (name = "id", value = "实例id", required = true, dataType = "String", paramType = "query")	})	@RequestMapping(value = "/getParentByLevel", produces = Constant.JSON_UTF_8,method = RequestMethod.GET)	public String getParentByLevel(HttpServletRequest request, @RequestParam Map<String, Object> parameter) {		SecTenantsEntity model = getService().getParentByLevel(parameter);		return new DataSetObject<SecTenantsEntity>(model).toJson(ignoreAttr.get(Constant.IGNORE_ATTR_GET));	}	}