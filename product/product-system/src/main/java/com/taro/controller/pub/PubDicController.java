package com.taro.controller.pub;import java.util.List;import java.util.Map;import java.util.Set;import javax.validation.ConstraintViolation;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import com.taro.common.DataSet;import com.taro.common.DataSetObject;import com.taro.constants.Constant;import com.taro.controller.AbstractController;import com.taro.entity.pub.PubDicEntity;import com.taro.exception.BusinessException;import com.taro.service.pub.PubDicService;import io.swagger.annotations.Api;import io.swagger.annotations.ApiImplicitParam;import io.swagger.annotations.ApiImplicitParams;import io.swagger.annotations.ApiOperation;/** *<p>Title:PubDicController.java</p> *<p>Description:基础数据实例 Action</p> *@author 张宇唯 *@version 1.0 *@Automatically generate by Coder in 2019-07-31 10:57 */@Api(tags = "基础数据")@RestController@RequestMapping(value="/pubDic")public class PubDicController extends AbstractController<PubDicEntity>{	public final static String MODULE = "基础数据";	public final static String ENTITY = "PubDicEntity";		@Autowired	private PubDicService pubDicService;		@Override    protected PubDicService getService () {        return pubDicService;    }	@Override    public String getModule() {		return MODULE;	}	@ApiOperation(value = "根据基类id和structure_pid获取没有配置结构的dic", notes = "根据基类id和structure_pid获取没有配置结构的dic")	@ApiImplicitParams({		@ApiImplicitParam (name = "parameter", value = "查询条件参数(base_code必传)", required = true, dataType = "Map<String, Object>", paramType = "query")	})	@RequestMapping(value = "/listRelation",produces = Constant.JSON_UTF_8,method = RequestMethod.GET)	public String listRelation(@RequestParam Map<String, Object> parameter){		listBefore(parameter);		List<PubDicEntity> result = getService().listRelation(parameter);		return new DataSet<PubDicEntity>(result).toJson();	}		@ApiOperation(value = "根据基类code获取下拉框数据", notes = "根据基类code获取下拉框数据")	@ApiImplicitParams({		@ApiImplicitParam (name = "parameter", value = "查询条件参数(base_code必传)", required = true, dataType = "Map<String, Object>", paramType = "query")	})	@RequestMapping(value = "/listByBase",produces = Constant.JSON_UTF_8,method = RequestMethod.GET)	public String listByBaseCode(@RequestParam Map<String, Object> parameter){		listBefore(parameter);		List<PubDicEntity> result = getService().listByBase(parameter);		return new DataSet<PubDicEntity>(result).toJson();	}	@ApiOperation(value = "根据实例id保存详情", notes = "根据实例id保存详情")	@ApiImplicitParams({		@ApiImplicitParam (name = "model", value = "保存实体", required = true, dataType = "PubBaseEntity", paramType = "query")	})	@RequestMapping(value = "/savePubDic",consumes = Constant.JSON_UTF_8,method = RequestMethod.POST)	public String savePubDic(@RequestBody PubDicEntity model) {				Set<ConstraintViolation<PubDicEntity>> constraintViolations = validator.validate(model);		if (!constraintViolations.isEmpty()) {			throw new BusinessException(constraintViolations.iterator().next().getMessage());		}		createBefore(model);		getService().savePubDic(model);		return new DataSetObject<PubDicEntity>(model).toJson(ignoreAttr.get(Constant.IGNORE_ATTR_CREATE));	}    }