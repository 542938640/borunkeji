package com.taro.controller.pub;import java.util.List;import java.util.Map;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import com.taro.common.DataSet;import com.taro.common.DataSetObject;import com.taro.constants.Constant;import com.taro.controller.AbstractController;import com.taro.entity.pub.PubBaseAttributeEntity;import com.taro.service.pub.PubBaseAttributeService;import io.swagger.annotations.Api;import io.swagger.annotations.ApiImplicitParam;import io.swagger.annotations.ApiImplicitParams;import io.swagger.annotations.ApiOperation;/** *<p>Title:PubBaseAttributeController.java</p> *<p>Description:基础数据类型属性 Action</p> *@author 张宇唯 *@version 1.0 *@Automatically generate by Coder in 2019-07-31 10:57 */@Api(tags = "基础数据类型属性")@RestController@RequestMapping(value="/pubBaseAttribute")public class PubBaseAttributeController extends AbstractController<PubBaseAttributeEntity>{	public final static String MODULE = "基础数据类型属性";	public final static String ENTITY = "PubBaseAttributeEntity";		@Autowired	private PubBaseAttributeService pubBaseAttributeService;		@Override    protected PubBaseAttributeService getService () {        return pubBaseAttributeService;    }	@Override    public String getModule() {		return MODULE;	}	@ApiOperation(value = "根据实例id获取详情", notes = "根据实例id获取详情")	@ApiImplicitParams({		@ApiImplicitParam (name = "page", value = "分页参数(页数)", required = false, dataType = "Number", paramType = "query"),		@ApiImplicitParam (name = "rows", value = "分页参数(每页个条数)", required = false, dataType = "Number", paramType = "query"),		@ApiImplicitParam (name = "parameter", value = "查询条件参数", required = true, dataType = "Map<String, Object>", paramType = "query")	})	@RequestMapping(value = "/listBaseAttribute",produces = Constant.JSON_UTF_8,method = RequestMethod.GET)	public String listBaseAttribute(@RequestParam Map<String, Object> parameter){		listBefore(parameter);		List<PubBaseAttributeEntity> result = getService().list(parameter);		return new DataSet<PubBaseAttributeEntity>(result).toJson();	}		@ApiOperation(value = "根据实例id保存详情", notes = "根据实例id保存详情")	@ApiImplicitParams({		@ApiImplicitParam (name = "model", value = "保存实体", required = true, dataType = "T", paramType = "query")	})	@RequestMapping(value = "/saveBaseAttribute",consumes = Constant.JSON_UTF_8,method = RequestMethod.POST)	public String saveBaseAttribute(@RequestBody PubBaseAttributeEntity model) {		getService().saveBaseAttribute(model);		return new DataSetObject<PubBaseAttributeEntity>(model).toJson(ignoreAttr.get(Constant.IGNORE_ATTR_CREATE));	}}